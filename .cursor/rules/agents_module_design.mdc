# Agents 模块设计文档（优化版）

## 概述

Agents 模块采用简洁的纯执行器设计，每个 Agent 只负责接收结构化 prompt，调用 LLM，返回结构化结果。Agent 不包含复杂的业务逻辑，所有智能都通过 prompt 和 LLM 实现。

---

## 一、设计原则

### 1.1 简洁性原则
- Agent 只做一件事：接收 prompt，调用 LLM，返回结果
- 不包含复杂的业务逻辑或状态管理
- 统一的接口和错误处理

### 1.2 可扩展性原则
- 基于配置的 Agent 注册机制
- 支持动态添加新的 Agent 类型
- 插件式的 Agent 实现

### 1.3 可测试性原则
- 支持 Mock LLM 进行测试
- 清晰的输入输出格式
- 完整的错误处理

---

## 二、核心架构

### 2.1 Agent 基类

```python
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional
from pydantic import BaseModel

class AgentRequest(BaseModel):
    """Agent 请求数据模型"""
    agent_type: str
    prompt: Dict[str, Any]
    context: Optional[Dict[str, Any]] = None

class AgentResponse(BaseModel):
    """Agent 响应数据模型"""
    agent_type: str
    success: bool
    output: Dict[str, Any]
    error_message: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None

class Agent(ABC):
    """Agent 基类"""

    def __init__(self, agent_type: str, llm_client: 'LLMClient'):
        self.agent_type = agent_type
        self.llm_client = llm_client

    @abstractmethod
    async def execute(self, prompt: Dict[str, Any]) -> AgentResponse:
        """执行 Agent 任务"""
        pass

    def _parse_llm_response(self, response: str) -> Dict[str, Any]:
        """解析 LLM 响应为结构化输出"""
        try:
            # 尝试解析为 JSON
            return json.loads(response)
        except json.JSONDecodeError:
            # 如果不是 JSON，返回原始文本
            return {"content": response}

    def _handle_error(self, error: Exception) -> AgentResponse:
        """处理执行错误"""
        return AgentResponse(
            agent_type=self.agent_type,
            success=False,
            output={},
            error_message=str(error)
        )
```

### 2.2 具体 Agent 实现

#### 2.2.1 Generator Agent

```python
class GeneratorAgent(Agent):
    """代码生成器 Agent"""

    def __init__(self, llm_client: 'LLMClient'):
        super().__init__("generator", llm_client)

    async def execute(self, prompt: Dict[str, Any]) -> AgentResponse:
        """生成代码"""
        try:
            # 调用 LLM
            response = await self.llm_client.complete(prompt["prompt_string"])

            # 解析响应
            output = self._parse_llm_response(response)

            return AgentResponse(
                agent_type=self.agent_type,
                success=True,
                output=output
            )
        except Exception as e:
            return self._handle_error(e)
```

#### 2.2.2 Debugger Agent

```python
class DebuggerAgent(Agent):
    """代码调试器 Agent"""

    def __init__(self, llm_client: 'LLMClient'):
        super().__init__("debugger", llm_client)

    async def execute(self, prompt: Dict[str, Any]) -> AgentResponse:
        """调试代码"""
        try:
            response = await self.llm_client.complete(prompt["prompt_string"])
            output = self._parse_llm_response(response)

            return AgentResponse(
                agent_type=self.agent_type,
                success=True,
                output=output
            )
        except Exception as e:
            return self._handle_error(e)
```

#### 2.2.3 Optimizer Agent

```python
class OptimizerAgent(Agent):
    """代码优化器 Agent"""

    def __init__(self, llm_client: 'LLMClient'):
        super().__init__("optimizer", llm_client)

    async def execute(self, prompt: Dict[str, Any]) -> AgentResponse:
        """优化代码"""
        try:
            response = await self.llm_client.complete(prompt["prompt_string"])
            output = self._parse_llm_response(response)

            return AgentResponse(
                agent_type=self.agent_type,
                success=True,
                output=output
            )
        except Exception as e:
            return self._handle_error(e)
```

#### 2.2.4 Evaluator Agent

```python
class EvaluatorAgent(Agent):
    """代码评估器 Agent"""

    def __init__(self, llm_client: 'LLMClient'):
        super().__init__("evaluator", llm_client)

    async def execute(self, prompt: Dict[str, Any]) -> AgentResponse:
        """评估代码"""
        try:
            response = await self.llm_client.complete(prompt["prompt_string"])
            output = self._parse_llm_response(response)

            return AgentResponse(
                agent_type=self.agent_type,
                success=True,
                output=output
            )
        except Exception as e:
            return self._handle_error(e)
```

### 2.3 Agent 管理器

```python
class AgentManager:
    """Agent 管理器"""

    def __init__(self):
        self.agents: Dict[str, Agent] = {}
        self.llm_client: Optional['LLMClient'] = None

    def register_agent(self, agent: Agent):
        """注册 Agent"""
        self.agents[agent.agent_type] = agent

    def set_llm_client(self, llm_client: 'LLMClient'):
        """设置 LLM 客户端"""
        self.llm_client = llm_client

    async def execute_agent(self, agent_type: str, prompt: Dict[str, Any]) -> AgentResponse:
        """执行指定的 Agent"""
        if agent_type not in self.agents:
            raise ValueError(f"Unknown agent type: {agent_type}")

        agent = self.agents[agent_type]
        return await agent.execute(prompt)

    def create_agent(self, agent_type: str) -> Agent:
        """创建 Agent 实例"""
        if not self.llm_client:
            raise ValueError("LLM client not set")

        agent_classes = {
            "generator": GeneratorAgent,
            "debugger": DebuggerAgent,
            "optimizer": OptimizerAgent,
            "evaluator": EvaluatorAgent
        }

        if agent_type not in agent_classes:
            raise ValueError(f"Unknown agent type: {agent_type}")

        return agent_classes[agent_type](self.llm_client)
```

---

## 三、Agent 类型定义

### 3.1 Generator Agent

**职责**：生成 Choreo DSL 算子代码

**输入格式**：
```json
{
  "agent_type": "generator",
  "prompt": {
    "prompt_string": "生成一个conv2d算子...",
    "requirements": {
      "input_shape": [1, 3, 224, 224],
      "output_shape": [1, 64, 112, 112],
      "kernel_size": [3, 3],
      "stride": [2, 2]
    },
    "context": {
      "session_id": "session_123",
      "previous_steps": []
    }
  }
}
```

**输出格式**：
```json
{
  "agent_type": "generator",
  "success": true,
  "output": {
    "code": "// 生成的Choreo DSL代码",
    "explanation": "代码说明",
    "metadata": {
      "complexity": "O(n)",
      "memory_usage": "1024KB"
    }
  }
}
```

### 3.2 Debugger Agent

**职责**：调试和修复代码问题

**输入格式**：
```json
{
  "agent_type": "debugger",
  "prompt": {
    "prompt_string": "调试以下代码...",
    "code": "// 有问题的代码",
    "error_message": "编译错误信息",
    "context": {
      "session_id": "session_123",
      "previous_steps": []
    }
  }
}
```

**输出格式**：
```json
{
  "agent_type": "debugger",
  "success": true,
  "output": {
    "fixed_code": "// 修复后的代码",
    "issues_found": ["问题1", "问题2"],
    "fixes_applied": ["修复1", "修复2"],
    "explanation": "修复说明"
  }
}
```

### 3.3 Optimizer Agent

**职责**：优化代码性能

**输入格式**：
```json
{
  "agent_type": "optimizer",
  "prompt": {
    "prompt_string": "优化以下代码...",
    "code": "// 原始代码",
    "performance_requirements": {
      "target_latency": "10ms",
      "memory_budget": "1MB"
    },
    "context": {
      "session_id": "session_123",
      "previous_steps": []
    }
  }
}
```

**输出格式**：
```json
{
  "agent_type": "optimizer",
  "success": true,
  "output": {
    "optimized_code": "// 优化后的代码",
    "optimizations": ["优化1", "优化2"],
    "performance_improvements": {
      "latency_reduction": "30%",
      "memory_reduction": "20%"
    },
    "explanation": "优化说明"
  }
}
```

### 3.4 Evaluator Agent

**职责**：评估代码质量和性能

**输入格式**：
```json
{
  "agent_type": "evaluator",
  "prompt": {
    "prompt_string": "评估以下代码...",
    "code": "// 待评估的代码",
    "evaluation_criteria": {
      "correctness": true,
      "performance": true,
      "readability": true
    },
    "context": {
      "session_id": "session_123",
      "previous_steps": []
    }
  }
}
```

**输出格式**：
```json
{
  "agent_type": "evaluator",
  "success": true,
  "output": {
    "score": 85,
    "evaluations": {
      "correctness": 90,
      "performance": 80,
      "readability": 85
    },
    "issues": ["问题1", "问题2"],
    "recommendations": ["建议1", "建议2"],
    "explanation": "评估说明"
  }
}
```

---

## 四、配置管理

### 4.1 Agent 配置

```json
{
  "agents": {
    "generator": {
      "enabled": true,
      "max_retries": 3,
      "timeout": 30,
      "model": "gpt-4"
    },
    "debugger": {
      "enabled": true,
      "max_retries": 3,
      "timeout": 30,
      "model": "gpt-4"
    },
    "optimizer": {
      "enabled": true,
      "max_retries": 3,
      "timeout": 30,
      "model": "gpt-4"
    },
    "evaluator": {
      "enabled": true,
      "max_retries": 3,
      "timeout": 30,
      "model": "gpt-4"
    }
  }
}
```

### 4.2 动态配置

```python
class AgentConfig:
    """Agent 配置类"""

    def __init__(self, config: Dict[str, Any]):
        self.enabled = config.get("enabled", True)
        self.max_retries = config.get("max_retries", 3)
        self.timeout = config.get("timeout", 30)
        self.model = config.get("model", "gpt-4")

    def to_dict(self) -> Dict[str, Any]:
        return {
            "enabled": self.enabled,
            "max_retries": self.max_retries,
            "timeout": self.timeout,
            "model": self.model
        }
```

---

## 五、错误处理

### 5.1 错误类型

```python
class AgentError(Exception):
    """Agent 基础错误"""
    pass

class AgentExecutionError(AgentError):
    """Agent 执行错误"""
    pass

class AgentTimeoutError(AgentError):
    """Agent 超时错误"""
    pass

class AgentConfigurationError(AgentError):
    """Agent 配置错误"""
    pass
```

### 5.2 重试机制

```python
import asyncio
from typing import Callable, Any

async def retry_with_backoff(
    func: Callable,
    max_retries: int = 3,
    base_delay: float = 1.0,
    *args,
    **kwargs
) -> Any:
    """指数退避重试机制"""

    for attempt in range(max_retries):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            if attempt == max_retries - 1:
                raise e

            delay = base_delay * (2 ** attempt)
            await asyncio.sleep(delay)
```

---

## 六、测试策略

### 6.1 单元测试

```python
import pytest
from unittest.mock import AsyncMock, MagicMock

class TestGeneratorAgent:
    """Generator Agent 测试"""

    @pytest.fixture
    def mock_llm_client(self):
        client = AsyncMock()
        client.complete.return_value = '{"code": "test code", "explanation": "test"}'
        return client

    @pytest.fixture
    def agent(self, mock_llm_client):
        return GeneratorAgent(mock_llm_client)

    @pytest.mark.asyncio
    async def test_execute_success(self, agent):
        """测试成功执行"""
        prompt = {
            "prompt_string": "生成一个简单的算子",
            "requirements": {"input_shape": [1, 3, 224, 224]}
        }

        result = await agent.execute(prompt)

        assert result.success is True
        assert result.agent_type == "generator"
        assert "code" in result.output

    @pytest.mark.asyncio
    async def test_execute_error(self, agent, mock_llm_client):
        """测试错误处理"""
        mock_llm_client.complete.side_effect = Exception("LLM error")

        prompt = {"prompt_string": "test"}
        result = await agent.execute(prompt)

        assert result.success is False
        assert "LLM error" in result.error_message
```

### 6.2 集成测试

```python
class TestAgentManager:
    """Agent Manager 集成测试"""

    @pytest.fixture
    def manager(self):
        return AgentManager()

    @pytest.fixture
    def mock_llm_client(self):
        client = AsyncMock()
        client.complete.return_value = '{"result": "test"}'
        return client

    def test_register_agent(self, manager):
        """测试 Agent 注册"""
        agent = MagicMock()
        agent.agent_type = "test_agent"

        manager.register_agent(agent)
        assert "test_agent" in manager.agents

    @pytest.mark.asyncio
    async def test_execute_agent(self, manager, mock_llm_client):
        """测试 Agent 执行"""
        manager.set_llm_client(mock_llm_client)
        agent = manager.create_agent("generator")
        manager.register_agent(agent)

        prompt = {"prompt_string": "test"}
        result = await manager.execute_agent("generator", prompt)

        assert result.success is True
        assert result.agent_type == "generator"
```

---

## 七、性能考虑

### 7.1 并发执行

```python
import asyncio
from typing import List

async def execute_agents_concurrently(
    manager: AgentManager,
    tasks: List[Dict[str, Any]]
) -> List[AgentResponse]:
    """并发执行多个 Agent 任务"""

    async def execute_task(task):
        return await manager.execute_agent(
            task["agent_type"],
            task["prompt"]
        )

    return await asyncio.gather(*[
        execute_task(task) for task in tasks
    ])
```

### 7.2 缓存机制

```python
from functools import lru_cache

class CachedAgent(Agent):
    """带缓存的 Agent"""

    def __init__(self, agent_type: str, llm_client: 'LLMClient'):
        super().__init__(agent_type, llm_client)
        self.cache = {}

    @lru_cache(maxsize=1000)
    def _get_cached_response(self, prompt_hash: str) -> Optional[Dict]:
        """获取缓存的响应"""
        return self.cache.get(prompt_hash)

    async def execute(self, prompt: Dict[str, Any]) -> AgentResponse:
        """执行并缓存结果"""
        prompt_hash = hash(str(prompt))
        cached = self._get_cached_response(prompt_hash)

        if cached:
            return AgentResponse(**cached)

        result = await super().execute(prompt)
        self.cache[prompt_hash] = result.dict()

        return result
```

---

## 八、总结

这个优化后的 Agents 模块设计具有以下特点：

1. **简洁明了**：每个 Agent 只负责一件事，职责清晰
2. **易于扩展**：基于配置的注册机制，便于添加新的 Agent 类型
3. **可测试性强**：统一的接口和错误处理，便于编写测试
4. **性能友好**：支持并发执行和缓存机制
5. **配置灵活**：支持动态配置和重试机制

该设计专注于核心功能，避免过度复杂化，为后续的功能扩展奠定了良好的基础。

4. **可扩展性**：易于添加新的Agent类型或修改现有Agent行为
5. **模块集成**：与LLM、Memory、Prompt等模块的无缝集成

该模块设计满足了Pinocchio系统对多智能体协作的需求，为代码生成、调试、优化和评估提供了可靠的执行基础。
