# Pinocchio 多智能体协作系统设计文档（优化版）

## 项目简介

Pinocchio 是一个用于自动编写、调试、优化 Choreo 计算核编程 DSL 算子的多代理系统。
系统基于 Python 实现，采用简洁的架构设计，以 Coordinator 为总指挥，Session 为结构化 logger，
支持流式输出和完整的交互历史记录。

---

## 一、整体架构设计

### 1.1 核心架构图

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   User Input    │───▶│  Coordinator    │───▶│  Planning Agent │
└─────────────────┘    └─────────────────┘    └─────────────────┘
                                │                       │
                                ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│  SessionLogger  │◀───│  PromptManager  │◀───│  Plan: TodoList │
└─────────────────┘    └─────────────────┘    └─────────────────┘
                                │
                                ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│  MemoryManager  │◀───│     Agent       │───▶│      LLM        │
└─────────────────┘    └─────────────────┘    └─────────────────┘
                                │
                                ▼
                       ┌─────────────────┐
                       │ KnowledgeManager│
                       └─────────────────┘
```

### 1.2 模块职责

| 模块 | 职责 | 核心功能 |
|------|------|----------|
| **Coordinator** | 系统总指挥 | 流程控制、Session管理、流式输出 |
| **SessionLogger** | 结构化logger | 摘要日志、详细通信记录、持久化 |
| **PromptManager** | 综合prompt构建器 | 整合Memory+Knowledge+Context |
| **Agent** | 纯执行器 | 调用LLM、解析结构化输出 |
| **MemoryManager** | 记忆管理 | 存储Agent交互、检索相关记忆 |
| **KnowledgeManager** | 知识管理 | 只读知识、按需检索 |
| **LLM** | 大语言模型接口 | 统一的LLM调用封装 |

---

## 二、核心组件设计

### 2.1 Coordinator（总指挥）

```python
class Coordinator:
    """系统总指挥，负责协调整个工作流程"""

    def __init__(self):
        self.prompt_manager = PromptManager()
        self.memory_manager = MemoryManager()
        self.knowledge_manager = KnowledgeManager()
        self.agent_manager = AgentManager()
        self.session = None  # Session作为data field

    async def process_user_request(self, user_prompt: str) -> AsyncGenerator[str, None]:
        """处理用户请求，流式返回结果"""

        # 1. 创建session logger
        self.session = SessionLogger(user_prompt)
        yield self.session.log_summary("Session started")

        # 2. 生成计划
        plan = await self._generate_plan(user_prompt)
        yield self.session.log_summary(f"Plan generated: {len(plan.steps)} steps")

        # 3. 执行计划
        for step in plan.steps:
            yield self.session.log_summary(f"Executing step {step.step_id}: {step.agent_type}")

            # 3.1 获取综合prompt
            prompt = await self.prompt_manager.get_comprehensive_prompt(
                step.agent_type,
                step.task_description,
                self.session.get_context()
            )

            # 3.2 执行agent
            result = await self.agent_manager.execute_agent(step.agent_type, prompt)

            # 3.3 记录到session
            self.session.log_communication(step.step_id, step.agent_type, prompt, result)

            yield self.session.log_summary(f"Step {step.step_id} completed")

        # 4. 完成
        yield self.session.log_summary("Session completed")
```

### 2.2 SessionLogger（结构化logger）

```python
class SessionLogger:
    """Session作为Coordinator的data field，记录通信日志"""

    def __init__(self, user_prompt: str):
        self.session_id = f"session_{uuid.uuid4().hex[:8]}"
        self.user_prompt = user_prompt
        self.created_at = datetime.utcnow()

        # 摘要日志（用户看到的）
        self.summary_logs: List[str] = []

        # 详细通信记录
        self.communication_logs: List[Dict] = []

    def log_summary(self, message: str) -> str:
        """记录摘要信息"""
        timestamp = datetime.utcnow().strftime("%H:%M:%S")
        summary = f"[{timestamp}] {message}"
        self.summary_logs.append(summary)
        return summary

    def log_communication(self, step_id: int, agent_type: str, prompt: Dict, result: Dict):
        """记录详细通信"""
        self.communication_logs.append({
            "step_id": step_id,
            "agent_type": agent_type,
            "timestamp": datetime.utcnow().isoformat(),
            "prompt": prompt,
            "result": result
        })

    def get_context(self) -> Dict:
        """获取当前上下文"""
        return {
            "session_id": self.session_id,
            "user_prompt": self.user_prompt,
            "total_steps": len(self.communication_logs),
            "latest_result": self.communication_logs[-1]["result"] if self.communication_logs else None
        }

    def save_to_file(self, filepath: str):
        """保存到JSON文件"""
        data = {
            "session_id": self.session_id,
            "user_prompt": self.user_prompt,
            "created_at": self.created_at.isoformat(),
            "summary_logs": self.summary_logs,
            "communication_logs": self.communication_logs
        }

        with open(filepath, 'w') as f:
            json.dump(data, f, indent=2)
```

### 2.3 PromptManager（综合prompt构建器）

```python
class PromptManager:
    """构建综合prompt，与Memory和Knowledge通信"""

    def __init__(self, memory_manager: MemoryManager, knowledge_manager: KnowledgeManager):
        self.memory_manager = memory_manager
        self.knowledge_manager = knowledge_manager

    async def get_comprehensive_prompt(self, agent_type: str, task_description: str, context: Dict) -> Dict:
        """构建综合prompt"""

        # 1. 获取相关memory
        relevant_memories = self.memory_manager.search_memories(
            agent_type=agent_type,
            keywords=task_description,
            limit=5
        )

        # 2. 获取相关知识
        relevant_knowledge = self.knowledge_manager.get_relevant_knowledge(
            agent_type=agent_type,
            task_description=task_description
        )

        # 3. 构建综合prompt
        comprehensive_prompt = {
            "agent_type": agent_type,
            "task_description": task_description,
            "context": context,
            "relevant_memories": relevant_memories,
            "relevant_knowledge": relevant_knowledge,
            "prompt_string": self._build_prompt_string(
                agent_type, task_description, context,
                relevant_memories, relevant_knowledge
            )
        }

        return comprehensive_prompt
```

### 2.4 Agent（纯执行器）

```python
class Agent:
    """Agent：接收结构化prompt，调用LLM，返回结构化结果"""

    def __init__(self, agent_type: str, llm_client: LLMClient):
        self.agent_type = agent_type
        self.llm_client = llm_client

    async def execute(self, prompt: Dict) -> Dict:
        """执行agent"""

        # 1. 提取prompt字符串
        prompt_string = prompt["prompt_string"]

        # 2. 调用LLM
        llm_response = await self.llm_client.complete(prompt_string)

        # 3. 解析为结构化输出
        structured_output = self._parse_llm_response(llm_response)

        # 4. 构建结果
        result = {
            "agent_type": self.agent_type,
            "success": True,
            "prompt": prompt,
            "llm_response": llm_response,
            "output": structured_output
        }

        return result
```

### 2.5 MemoryManager（记忆管理）

```python
class MemoryManager:
    """管理Agent的交互记忆"""

    def __init__(self, storage_path: str = "./memories"):
        self.storage_path = Path(storage_path)
        self.storage_path.mkdir(exist_ok=True)
        self.memories: List[Dict] = []
        self._load_memories()

    def add_memory(self, agent_type: str, prompt: Dict, result: Dict):
        """添加记忆"""
        memory = {
            "id": str(uuid.uuid4()),
            "agent_type": agent_type,
            "timestamp": datetime.utcnow().isoformat(),
            "prompt": prompt,
            "result": result,
            "summary": self._generate_summary(result)
        }

        self.memories.append(memory)
        self._save_memories()

    def search_memories(self, agent_type: str = None, keywords: str = None, limit: int = 10) -> List[Dict]:
        """搜索相关记忆"""
        results = []

        for memory in self.memories:
            # 按agent_type过滤
            if agent_type and memory["agent_type"] != agent_type:
                continue

            # 按关键词过滤
            if keywords and keywords.lower() not in memory["summary"].lower():
                continue

            results.append(memory)

            if len(results) >= limit:
                break

        return results
```

### 2.6 KnowledgeManager（知识管理）

```python
class KnowledgeManager:
    """管理只读知识"""

    def __init__(self, knowledge_path: str = "./knowledge"):
        self.knowledge_path = Path(knowledge_path)
        self.knowledge_path.mkdir(exist_ok=True)
        self.knowledge: List[Dict] = []
        self._load_knowledge()

    def get_relevant_knowledge(self, agent_type: str, task_description: str) -> List[Dict]:
        """获取相关知识"""
        relevant = []

        for item in self.knowledge:
            # 按agent_type匹配
            if item["agent_type"] == agent_type:
                relevant.append(item)

            # 按关键词匹配
            if any(keyword in task_description.lower()
                   for keyword in item.get("keywords", [])):
                relevant.append(item)

        return relevant[:5]  # 限制数量
```

---

## 三、通信流程设计

### 3.1 完整调用流程

```
1. User Input → Coordinator
2. Coordinator → Planning Agent → Plan
3. Coordinator → PromptManager
4. PromptManager → MemoryManager + KnowledgeManager
5. PromptManager → Coordinator (comprehensive_prompt)
6. Coordinator → Agent
7. Agent → LLM
8. Agent → Coordinator (structured_result)
9. Coordinator → MemoryManager (store memory)
10. Coordinator → SessionLogger (log communication)
11. Coordinator → User (stream output)
```

### 3.2 数据流向图

```mermaid
sequenceDiagram
    participant U as User
    participant C as Coordinator
    participant P as Planning Agent
    participant PM as PromptManager
    participant MM as MemoryManager
    participant KM as KnowledgeManager
    participant A as Agent
    participant L as LLM
    participant S as SessionLogger

    U->>C: user_prompt
    C->>S: create session
    C->>P: generate plan
    P->>C: plan

    loop for each step
        C->>PM: get_comprehensive_prompt
        PM->>MM: search_memories
        PM->>KM: get_relevant_knowledge
        PM->>C: comprehensive_prompt
        C->>A: execute
        A->>L: complete
        L->>A: response
        A->>C: structured_result
        C->>MM: add_memory
        C->>S: log_communication
        C->>U: stream output
    end

    C->>S: complete session
    C->>U: final result
```

---

## 四、文件结构设计

```
pinocchio/
├── coordinator.py          # 总指挥
├── session_logger.py      # 结构化logger
├── prompt_manager.py      # 综合prompt构建器
├── agent.py              # Agent基类和实现
├── memory_manager.py     # 记忆管理
├── knowledge_manager.py  # 知识管理
├── llm_client.py        # LLM客户端
├── models/              # 数据模型
│   ├── __init__.py
│   ├── session.py
│   ├── memory.py
│   ├── knowledge.py
│   └── agent.py
└── utils/               # 工具函数
    ├── __init__.py
    ├── json_parser.py
    └── file_utils.py

# 数据存储目录
sessions/               # Session日志文件
memories/              # Memory存储
knowledge/             # Knowledge存储
```

---

## 五、技术栈选择

| 组件 | 技术选择 | 理由 |
|------|----------|------|
| 核心语言 | Python 3.9+ | 简洁、生态丰富 |
| 异步支持 | asyncio | 支持并发处理 |
| 数据序列化 | JSON | 简单、可读性强 |
| 文件存储 | JSON文件 | 便于调试、无需数据库 |
| 类型检查 | Pydantic | 运行时类型验证 |
| 测试框架 | pytest | 标准Python测试框架 |

---

## 六、设计原则

### 6.1 简洁性原则
- 每个模块职责单一明确
- 避免过度设计
- 优先使用简单解决方案

### 6.2 可扩展性原则
- 模块间松耦合
- 接口标准化
- 支持插件式扩展

### 6.3 可调试性原则
- 完整的日志记录
- JSON格式便于查看
- 清晰的错误信息

### 6.4 流式体验原则
- 实时进度反馈
- 用户友好的输出
- 类似聊天AI的体验

---

## 七、开发优先级

### 7.1 第一阶段：核心架构
1. Coordinator基础框架
2. SessionLogger实现
3. 基础Agent实现
4. 简单LLM客户端

### 7.2 第二阶段：功能完善
1. PromptManager实现
2. MemoryManager实现
3. KnowledgeManager实现
4. 完整工作流程

### 7.3 第三阶段：优化扩展
1. 性能优化
2. 错误处理完善
3. 测试覆盖
4. 文档完善

---

## 八、总结

这个优化后的设计具有以下特点：

1. **架构简洁**：清晰的模块职责和通信路径
2. **易于理解**：每个组件功能明确，便于开发和维护
3. **可扩展性强**：模块化设计，便于后续功能扩展
4. **调试友好**：JSON文件存储，便于查看和调试
5. **用户体验好**：流式输出，实时反馈

该设计专注于核心功能，避免过度复杂化，为后续的完善和扩展奠定了良好的基础。

5. **性能测试**

   * 测量关键操作的延迟和资源消耗。
   * 验证在持续运行下的稳定性。
