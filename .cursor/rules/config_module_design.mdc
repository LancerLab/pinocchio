---
description:
globs:
alwaysApply: false
---
# Config Module Design

## Overview

The Config Module is responsible for managing configuration settings throughout the Pinocchio multi-agent system. It provides a centralized mechanism for loading, validating, accessing, and updating configuration values from various sources, including environment variables, configuration files, and command-line arguments. The module ensures that all components of the system have access to consistent and validated configuration data.

## Design Goals

1. **Centralization**: Provide a single source of truth for all configuration settings
2. **Flexibility**: Support multiple configuration sources with clear precedence rules
3. **Security**: Safely handle sensitive configuration values like API keys
4. **Validation**: Ensure configuration values meet expected formats and constraints
5. **Extensibility**: Allow easy addition of new configuration parameters as the system evolves

## Core Components

### 1. Settings Manager

The central component for managing configuration settings:

```python
from typing import Any, Dict, Optional, Union
import os
import json
import yaml
from pathlib import Path

class Settings:
    """Central manager for all configuration settings."""

    def __init__(self):
        self._config: Dict[str, Any] = {}
        self._config_sources: Dict[str, str] = {}  # Tracks where each config came from

    def load_from_dict(self, config_dict: Dict[str, Any], source: str = "dict") -> None:
        """
        Load configuration from a dictionary.

        Args:
            config_dict: Dictionary containing configuration values
            source: Source identifier for tracking
        """
        for key, value in config_dict.items():
            self._set_value(key, value, source)

    def load_from_env(self, prefix: str = "PINOCCHIO_") -> None:
        """
        Load configuration from environment variables.

        Args:
            prefix: Prefix for environment variables to consider
        """
        for key, value in os.environ.items():
            if key.startswith(prefix):
                config_key = key[len(prefix):].lower()
                self._set_value(config_key, value, "environment")

    def load_from_file(self, filepath: Union[str, Path], format: Optional[str] = None) -> None:
        """
        Load configuration from a file.

        Args:
            filepath: Path to the configuration file
            format: File format ('json', 'yaml', or None to infer from extension)
        """
        filepath = Path(filepath)
        if not filepath.exists():
            raise FileNotFoundError(f"Configuration file not found: {filepath}")

        if format is None:
            format = filepath.suffix.lstrip('.').lower()

        with open(filepath, 'r') as f:
            if format == 'json':
                config_dict = json.load(f)
            elif format in ('yaml', 'yml'):
                import yaml  # Lazy import
                config_dict = yaml.safe_load(f)
            else:
                raise ValueError(f"Unsupported configuration format: {format}")

        self.load_from_dict(config_dict, f"file:{filepath}")

    def get(self, key: str, default: Any = None) -> Any:
        """
        Get a configuration value.

        Args:
            key: Configuration key (supports dot notation for nested configs)
            default: Default value if key is not found

        Returns:
            Configuration value or default
        """
        keys = key.split('.')
        value = self._config

        for k in keys:
            if isinstance(value, dict) and k in value:
                value = value[k]
            else:
                return default

        return value

    def set(self, key: str, value: Any, source: str = "runtime") -> None:
        """
        Set a configuration value.

        Args:
            key: Configuration key (supports dot notation for nested configs)
            value: Configuration value
            source: Source identifier for tracking
        """
        self._set_value(key, value, source)

    def _set_value(self, key: str, value: Any, source: str) -> None:
        """
        Internal method to set a configuration value with source tracking.

        Args:
            key: Configuration key (supports dot notation for nested configs)
            value: Configuration value
            source: Source identifier for tracking
        """
        keys = key.split('.')
        config = self._config

        # Navigate to the nested dictionary
        for k in keys[:-1]:
            if k not in config or not isinstance(config[k], dict):
                config[k] = {}
            config = config[k]

        # Set the value
        config[keys[-1]] = value
        self._config_sources[key] = source

    def get_all(self) -> Dict[str, Any]:
        """Get all configuration values."""
        return self._config.copy()

    def get_source(self, key: str) -> Optional[str]:
        """
        Get the source of a configuration value.

        Args:
            key: Configuration key

        Returns:
            Source identifier or None if key not found
        """
        return self._config_sources.get(key)
```

### 2. Configuration Schema and Validation

A system for defining and validating configuration schemas:

```python
from typing import Any, Dict, List, Optional, Type, Union
from pydantic import BaseModel, ValidationError, validator

class ConfigSchema(BaseModel):
    """Base class for configuration schemas."""

    @classmethod
    def validate_config(cls, config: Dict[str, Any]) -> Dict[str, Any]:
        """
        Validate configuration against the schema.

        Args:
            config: Configuration dictionary to validate

        Returns:
            Validated configuration dictionary

        Raises:
            ConfigValidationError: If validation fails
        """
        try:
            validated = cls(**config)
            return validated.dict()
        except ValidationError as e:
            raise ConfigValidationError(str(e))

    @classmethod
    def get_schema(cls) -> Dict[str, Any]:
        """Get the JSON schema for this configuration."""
        return cls.schema()
```

Example configuration schema:

```python
class LLMConfig(ConfigSchema):
    """Configuration schema for LLM settings."""

    provider: str
    api_key: Optional[str] = None
    model: str = "gpt-3.5-turbo"
    temperature: float = 0.7
    max_tokens: int = 1000

    @validator('temperature')
    def temperature_must_be_valid(cls, v):
        if not 0.0 <= v <= 1.0:
            raise ValueError('temperature must be between 0.0 and 1.0')
        return v

class AgentsConfig(ConfigSchema):
    """Configuration schema for agents settings."""

    generator: Dict[str, Any] = {}
    debugger: Dict[str, Any] = {}
    optimizer: Dict[str, Any] = {}
    evaluator: Dict[str, Any] = {}

class AppConfig(ConfigSchema):
    """Main application configuration schema."""

    llm: LLMConfig
    agents: AgentsConfig
    log_level: str = "INFO"
    memory_path: str = "./memory"
    knowledge_path: str = "./knowledge"
```

### 3. Credential Manager

A secure component for handling sensitive configuration values:

```python
import os
import json
import keyring
from typing import Optional

class CredentialManager:
    """Manager for secure handling of credentials and API keys."""

    def __init__(self, service_name: str = "pinocchio"):
        self.service_name = service_name

    def get_api_key(self, provider: str) -> Optional[str]:
        """
        Get an API key from the most secure available source.

        Args:
            provider: The service provider (e.g., "openai", "anthropic")

        Returns:
            API key if found, None otherwise
        """
        # Try environment variable first
        env_var = f"{provider.upper()}_API_KEY"
        if env_var in os.environ:
            return os.environ[env_var]

        # Then try system keyring
        try:
            key = keyring.get_password(self.service_name, f"{provider}_api_key")
            if key:
                return key
        except Exception:
            pass

        # Finally try credentials file
        try:
            creds_file = os.path.expanduser("~/.pinocchio/credentials.json")
            if os.path.exists(creds_file):
                with open(creds_file, 'r') as f:
                    creds = json.load(f)
                    if provider in creds and "api_key" in creds[provider]:
                        return creds[provider]["api_key"]
        except Exception:
            pass

        return None

    def set_api_key(self, provider: str, api_key: str, use_keyring: bool = True) -> None:
        """
        Store an API key securely.

        Args:
            provider: The service provider (e.g., "openai", "anthropic")
            api_key: The API key to store
            use_keyring: Whether to use the system keyring
        """
        if use_keyring:
            try:
                keyring.set_password(self.service_name, f"{provider}_api_key", api_key)
                return
            except Exception:
                pass

        # Fall back to credentials file
        creds_file = os.path.expanduser("~/.pinocchio/credentials.json")
        os.makedirs(os.path.dirname(creds_file), exist_ok=True)

        creds = {}
        if os.path.exists(creds_file):
            try:
                with open(creds_file, 'r') as f:
                    creds = json.load(f)
            except Exception:
                pass

        if provider not in creds:
            creds[provider] = {}
        creds[provider]["api_key"] = api_key

        with open(creds_file, 'w') as f:
            json.dump(creds, f)

        # Set permissions to restrict access
        os.chmod(creds_file, 0o600)
```

### 4. Configuration Loader

A utility for loading configuration from multiple sources with precedence:

```python
from typing import Dict, Any, List, Optional
import os
from pathlib import Path

class ConfigLoader:
    """Utility for loading configuration from multiple sources with precedence."""

    def __init__(self, settings: Settings, config_schema: Optional[Type[ConfigSchema]] = None):
        self.settings = settings
        self.config_schema = config_schema

    def load_config(self,
                   default_config: Dict[str, Any] = None,
                   config_files: List[str] = None,
                   env_prefix: str = "PINOCCHIO_",
                   validate: bool = True) -> Dict[str, Any]:
        """
        Load configuration from multiple sources with precedence.

        Precedence order (highest to lowest):
        1. Environment variables
        2. Command-line arguments (if provided)
        3. User config file
        4. Default config file
        5. Default values

        Args:
            default_config: Default configuration values
            config_files: List of configuration files to try (in order of precedence)
            env_prefix: Prefix for environment variables
            validate: Whether to validate the configuration

        Returns:
            Complete configuration dictionary
        """
        # Start with default config
        if default_config:
            self.settings.load_from_dict(default_config, "defaults")

        # Load from config files
        if config_files:
            for config_file in config_files:
                try:
                    self.settings.load_from_file(config_file)
                except FileNotFoundError:
                    pass  # Skip missing files

        # Load from environment variables (highest precedence)
        self.settings.load_from_env(prefix=env_prefix)

        # Get the complete config
        config = self.settings.get_all()

        # Validate if requested and schema is available
        if validate and self.config_schema:
            config = self.config_schema.validate_config(config)

        return config
```

## Module Structure

```
config/
├── __init__.py          # Exports main classes and functions
├── settings.py          # Settings manager implementation
├── schema.py            # Configuration schema definitions
├── credentials.py       # Secure credential management
├── loader.py            # Configuration loading utilities
└── defaults.py          # Default configuration values
```

## Configuration Sources and Precedence

The module supports multiple configuration sources with the following precedence order (highest to lowest):

1. **Runtime Settings**: Configuration values set programmatically at runtime
2. **Environment Variables**: Configuration from environment variables (with prefix)
3. **Command-Line Arguments**: Configuration from command-line arguments
4. **User Configuration File**: User-specific configuration file
5. **Default Configuration File**: Default configuration file included with the application
6. **Default Values**: Hardcoded default values in the code

## Configuration File Formats

The module supports the following configuration file formats:

1. **JSON**: Standard JSON format
2. **YAML**: YAML format for more readable configuration files

Example JSON configuration:

```json
{
  "llm": {
    "provider": "openai",
    "model": "gpt-4",
    "temperature": 0.7,
    "max_tokens": 2000
  },
  "agents": {
    "generator": {
      "prompt_template": "generator_default"
    },
    "debugger": {
      "prompt_template": "debugger_default"
    }
  },
  "log_level": "INFO",
  "memory_path": "./data/memory"
}
```

Example YAML configuration:

```yaml
llm:
  provider: openai
  model: gpt-4
  temperature: 0.7
  max_tokens: 2000

agents:
  generator:
    prompt_template: generator_default
  debugger:
    prompt_template: debugger_default

log_level: INFO
memory_path: ./data/memory
```

## Environment Variables

Environment variables are supported with a configurable prefix (default: `PINOCCHIO_`):

```
PINOCCHIO_LLM_PROVIDER=openai
PINOCCHIO_LLM_MODEL=gpt-4
PINOCCHIO_LLM_TEMPERATURE=0.5
PINOCCHIO_LOG_LEVEL=DEBUG
```

Nested configuration keys use underscores to separate levels:

```
PINOCCHIO_AGENTS_GENERATOR_PROMPT_TEMPLATE=custom_generator
```

## Secure Credential Management

The module provides secure handling of sensitive information such as API keys:

1. **System Keyring**: Uses the operating system's secure credential storage when available
2. **Encrypted File**: Falls back to an encrypted configuration file
3. **Environment Variables**: Supports environment variables for CI/CD environments

## Configuration Validation

Configuration validation is performed using Pydantic models:

1. **Type Checking**: Ensures configuration values have the correct types
2. **Constraint Validation**: Validates that values meet defined constraints
3. **Default Values**: Provides default values for optional configuration
4. **Required Fields**: Enforces required configuration fields

## Configuration Access Patterns

### 1. Direct Access

```python
from config import settings

# Get a configuration value
model = settings.get("llm.model", "gpt-3.5-turbo")  # Default if not found

# Set a configuration value
settings.set("llm.temperature", 0.8)
```

### 2. Dependency Injection

```python
def initialize_llm_client(settings: Settings):
    provider = settings.get("llm.provider")
    api_key = settings.get("llm.api_key")
    model = settings.get("llm.model")

    # Initialize client with configuration
    return LLMClient(provider, api_key, model)
```

### 3. Configuration Context

```python
from config import ConfigContext

# Create a configuration context
with ConfigContext(override={"llm.temperature": 0.9}) as ctx:
    # Code in this block uses the overridden configuration
    client = initialize_llm_client(ctx.settings)

# Outside the block, original configuration is restored
```

## Integration with Other Modules

### 1. LLM Module Integration

```python
from config import settings, CredentialManager

class LLMClientFactory:
    @staticmethod
    def create_client(provider: str = None):
        # Get provider from config if not specified
        if provider is None:
            provider = settings.get("llm.provider", "openai")

        # Get API key securely
        cred_manager = CredentialManager()
        api_key = cred_manager.get_api_key(provider)

        # Get other configuration values
        model = settings.get(f"llm.{provider}.model")
        temperature = settings.get(f"llm.{provider}.temperature", 0.7)

        # Create appropriate client
        if provider == "openai":
            return OpenAIClient(api_key=api_key, model=model, temperature=temperature)
        elif provider == "anthropic":
            return AnthropicClient(api_key=api_key, model=model, temperature=temperature)
        elif provider == "ollama":
            base_url = settings.get("llm.ollama.base_url", "http://localhost:11434")
            return OllamaClient(base_url=base_url, model=model, temperature=temperature)
        else:
            raise ValueError(f"Unsupported LLM provider: {provider}")
```

### 2. CLI Module Integration

```python
import argparse
from config import settings, ConfigLoader

def setup_config_arguments(parser: argparse.ArgumentParser):
    """Add configuration-related arguments to a parser."""
    parser.add_argument(
        "--config",
        help="Path to configuration file",
        default="~/.pinocchio/config.json"
    )
    parser.add_argument(
        "--llm-provider",
        help="LLM provider to use",
        dest="llm.provider"
    )
    parser.add_argument(
        "--llm-model",
        help="LLM model to use",
        dest="llm.model"
    )
    parser.add_argument(
        "--log-level",
        help="Logging level",
        choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
        dest="log_level"
    )

def load_config_from_args(args: argparse.Namespace):
    """Load configuration from command-line arguments."""
    # Convert args to dictionary, handling nested keys
    config_dict = {}
    for key, value in vars(args).items():
        if value is not None and "." in key:
            parts = key.split(".")
            current = config_dict
            for part in parts[:-1]:
                if part not in current:
                    current[part] = {}
                current = current[part]
            current[parts[-1]] = value

    # Load configuration
    config_loader = ConfigLoader(settings)
    config_loader.load_config(
        config_files=[args.config] if hasattr(args, "config") else None
    )

    # Apply command-line overrides
    settings.load_from_dict(config_dict, "command_line")
```

## Configuration Management Utilities

### 1. Configuration Export

```python
def export_config(filepath: str, format: str = "json", include_defaults: bool = True):
    """
    Export current configuration to a file.

    Args:
        filepath: Path to export configuration to
        format: File format ('json' or 'yaml')
        include_defaults: Whether to include default values
    """
    config = settings.get_all() if include_defaults else settings.get_non_defaults()

    with open(filepath, 'w') as f:
        if format == "json":
            json.dump(config, f, indent=2)
        elif format == "yaml":
            import yaml
            yaml.dump(config, f, default_flow_style=False)
        else:
            raise ValueError(f"Unsupported format: {format}")
```

### 2. Configuration Diff

```python
def config_diff(config1: Dict[str, Any], config2: Dict[str, Any]) -> Dict[str, Any]:
    """
    Calculate the difference between two configurations.

    Args:
        config1: First configuration
        config2: Second configuration

    Returns:
        Dictionary of differences
    """
    diff = {}

    # Find keys in config2 that differ from config1
    for key, value in config2.items():
        if key not in config1:
            diff[key] = {"added": value}
        elif isinstance(value, dict) and isinstance(config1[key], dict):
            nested_diff = config_diff(config1[key], value)
            if nested_diff:
                diff[key] = nested_diff
        elif config1[key] != value:
            diff[key] = {"from": config1[key], "to": value}

    # Find keys in config1 that are not in config2
    for key in config1:
        if key not in config2:
            diff[key] = {"removed": config1[key]}

    return diff
```

## Future Enhancements

1. **Dynamic Configuration**: Support for configuration values that can change at runtime with notifications
2. **Configuration Profiles**: Support for different configuration profiles (e.g., development, testing, production)
3. **Remote Configuration**: Support for loading configuration from remote sources (e.g., etcd, Consul)
4. **Configuration UI**: A web interface for viewing and editing configuration
5. **Configuration Versioning**: Track changes to configuration over time

## Conclusion

The Config Module provides a comprehensive system for managing configuration throughout the Pinocchio multi-agent system. By centralizing configuration management and providing robust validation, it ensures that all components have access to consistent and valid configuration data. The module's support for multiple configuration sources, secure credential management, and flexible access patterns makes it adaptable to various deployment scenarios and development workflows.
