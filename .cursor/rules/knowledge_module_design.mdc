# Pinocchio 多智能体系统 Knowledge 模块设计（重构版）

## 1. 概述

Knowledge 模块负责 Pinocchio 多智能体系统的领域知识、优化技术知识、DSL 语法知识等多源知识的结构化管理与版本追踪。该模块为 generator、debugger、evaluator 等 agent 提供高性能代码生成与调优所需的知识片段，支持 JSON/Markdown 等多种知识类型，并与 prompt、memory、session 模块解耦。

---

## 2. 目录结构

```
knowledge/
├── __init__.py
├── models/
│   ├── __init__.py
│   └── knowledge.py      # Knowledge数据模型
├── resources/            # 知识资源（结构化/文档）
├── manager.py            # Knowledge管理器
└── utils.py
```

---

## 3. 数据模型

```python
from pydantic import BaseModel, Field
from typing import Dict, List, Optional, Any
from datetime import datetime
import uuid

class KnowledgeFragment(BaseModel):
    fragment_id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    session_id: Optional[str] = None
    category: str  # domain/optimization/dsl/other
    title: str
    content: Any  # 可为结构化JSON或Markdown文本
    version: str
    created_at: datetime = Field(default_factory=datetime.utcnow)
    parent_version: Optional[str] = None
    metadata: Dict[str, Any] = Field(default_factory=dict)

class KnowledgeVersionHistory(BaseModel):
    session_id: Optional[str] = None
    fragments: List[KnowledgeFragment] = Field(default_factory=list)
    version_chain: List[str] = Field(default_factory=list)
```

---

## 4. 主要接口

- 知识片段的结构化存储、检索、版本管理
- 按 session/agent/优化技术等多维度提取知识
- 支持 JSON/Markdown 等多种知识类型
- 知识片段与 prompt/memory/session 的引用与追踪

---

## 5. 设计要点

- 所有知识片段均有结构化元数据与版本链路
- 支持领域知识、优化技术知识、DSL 语法知识等多类别
- 支持知识片段的多版本管理与历史追踪
- 与 prompt/memory/session 解耦，仅存储引用
- 支持知识片段的自动提取与推荐

---

## 6. 典型流程

1. 用户/agent 触发知识片段提取，按任务类型/优化技术/DSL 等维度检索
2. 生成/调优 prompt 时，自动集成相关知识片段
3. 每次知识更新均生成新版本，支持历史追踪与回滚
4. agent 可按需获取结构化知识片段用于推理/生成/分析

---

## 7. 重构优势

- **结构化**：所有知识片段均有结构化元数据，便于自动化处理
- **多版本**：支持知识片段多版本管理与历史追踪
- **高适配性**：支持多类别知识与 agent 适配
- **易集成**：与 prompt/memory/session 解耦，便于模块协作

---

## 8. 测试策略

- 知识片段结构与元数据校验
- 多版本知识管理与回滚
- 按需提取与推荐的准确性
- 知识与 prompt/memory/session 的引用一致性

---

该设计完全对齐 pinocchio_workflow.mdc，满足高性能代码生成与调优场景下多智能体协作、结构化知识管理、优化技术知识集成等核心需求。
