# Pinocchio 多智能体系统 Session 模块设计（重构版）

## 1. 概述

Session 模块负责 Pinocchio 多智能体系统的会话生命周期管理。每个 session 代表一次高性能代码生成与调优任务的完整流程，贯穿 generator、debugger、evaluator 等 agent 的多轮协作。Session 记录任务描述、状态、时间、优化迭代、版本追踪等核心信息，并与 memory、prompt、knowledge 模块解耦。

---

## 2. 目录结构

```
session/
├── __init__.py
├── models/
│   ├── __init__.py
│   └── session.py      # Session数据模型
├── manager.py          # Session管理器
└── utils.py
```

---

## 3. 数据模型

```python
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from datetime import datetime
import uuid

class Session(BaseModel):
    session_id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    task_description: str
    status: str = "active"  # active/completed/failed
    creation_time: datetime = Field(default_factory=datetime.utcnow)
    end_time: Optional[datetime] = None
    runtime_seconds: Optional[float] = None

    # 版本追踪
    memory_versions: List[str] = Field(default_factory=list)
    prompt_versions: List[str] = Field(default_factory=list)
    knowledge_versions: List[str] = Field(default_factory=list)

    # 优化迭代历史
    optimization_iterations: List[Dict[str, Any]] = Field(default_factory=list)
    # 结构化性能指标
    performance_trend: List[Dict[str, Any]] = Field(default_factory=list)
    # 当前优化目标
    target_performance: Optional[Dict[str, Any]] = None

    # 关联的代码版本
    code_version_ids: List[str] = Field(default_factory=list)
```

---

## 4. 主要接口

- 创建/结束/恢复 session
- 记录每轮 agent 交互与优化建议
- 追踪 memory、prompt、knowledge 版本
- 查询 session 优化历史与性能趋势
- 导出/回溯 session 全部数据

---

## 5. 设计要点

- 与 memory、prompt、knowledge 解耦，仅存储引用
- 支持多轮优化与性能演化追踪
- 支持 session 级别的导出与回溯
- 结构化存储所有关键元数据，便于后续分析与可视化
- 适配 pinocchio_workflow.mdc 的多智能体协作与数据流转规范

---

## 6. 典型流程

1. 用户提交高性能任务，创建 session，初始化 task_description
2. 记录每轮 generator/debugger/evaluator agent 的输入输出、优化建议、性能指标
3. 每次 agent 交互后，更新 memory/prompt/knowledge 版本引用
4. 记录优化迭代历史与性能趋势，支持多轮追踪
5. session 结束时，归档所有数据，支持导出与回溯

---

## 7. 重构优势

- **高内聚低耦合**：只负责会话生命周期与全局追踪，数据模型清晰
- **优化驱动**：天然支持多轮性能优化与演化
- **版本可追溯**：所有关键数据均有版本链路
- **易于集成**：与 memory、prompt、knowledge、agent 等模块解耦

---

## 8. 测试策略

- 会话创建/结束/恢复的正确性
- 多轮 agent 交互与优化历史的完整性
- 版本追踪与引用一致性
- 性能趋势与目标的准确记录
- 导出/回溯功能的健壮性

---

该设计完全对齐 pinocchio_workflow.mdc 的高性能代码生成与调优流程，满足多智能体协作、优化迭代、版本追踪、性能趋势等核心需求。
