---
description: 
globs: 
alwaysApply: false
---
# Pinocchio 多智能体系统开发计划

## 📋 概述

本文档提供了 Pinocchio 多智能体系统的详细开发计划，按照模块依赖关系和功能重要性进行排序。每个开发步骤专注于单一模块的特定功能，并明确指出依赖的设计文档和前置步骤。

## 🔄 开发原则

- 每步开发仅聚焦单一模块的单一功能点
- 每步明确依赖的设计文档（@/.cursor/rules/xxx.mdc）
- 遵循模块间依赖顺序，确保构建链完整
- 后续模块若影响已开发模块，需显式进行更新步骤
- 每步附带提示性 Prompt，便于驱动AI代理开发

## 🚀 开发阶段与步骤

### 阶段 1: 基础设施搭建

#### 步骤 1.1: 项目结构初始化
- 🧱 所属模块：全局
- 📄 依赖设计文档：无
- 🎯 开发目标：创建基本目录结构和初始化项目
- ⏱️ 预计时间：0.5 天
- 🧠 Prompt:
```
创建以下目录结构:
pinocchio/
├── config/
├── knowledge/
├── memory/
├── prompt/
├── session/
├── llm/
├── agents/
├── workflows/
├── tests/
└── .cursor/rules/
```

#### 步骤 1.2: 配置管理模块基础实现
- 🧱 所属模块：config
- 📄 依赖设计文档：@/.cursor/rules/config_module_design.mdc
- 🎯 开发目标：实现简化版 Config 模块
- ⏱️ 预计时间：1 天
- 🧠 Prompt:
```
实现轻量级配置管理器:
1. 支持从 JSON 文件加载配置
2. 支持从环境变量覆盖配置
3. 提供简单的 get/set 接口
4. 实现配置默认值机制
```

#### 步骤 1.3: 错误处理模块基础实现
- 🧱 所属模块：errors
- 📄 依赖设计文档：@/.cursor/rules/errors_module_design.mdc
- 🎯 开发目标：实现所有核心异常类
- ⏱️ 预计时间：0.5 天
- 🧠 Prompt:
```
依据 errors_module_design.mdc 中的异常定义，创建错误类层次结构，支持带上下文的详细错误报告。包括:
1. 基础异常类
2. 模块特定异常类（MemoryError, SessionError 等）
3. 错误码和错误消息格式化
```

#### 步骤 1.4: 基础模块单元测试
- 🧱 所属模块：config, errors
- 📄 依赖设计文档：@/.cursor/rules/config_module_design.mdc, @/.cursor/rules/errors_module_design.mdc
- 🎯 开发目标：为基础模块编写单元测试
- ⏱️ 预计时间：0.5 天
- ⛓️ 依赖步骤：1.2, 1.3
- 🧠 Prompt:
```
为 Config 和 Errors 模块编写单元测试:
1. 测试配置加载、环境变量覆盖、默认值机制
2. 测试异常类的创建、属性和继承关系
3. 测试错误消息格式化和上下文信息
```

### 阶段 2: 核心模块实现

#### 步骤 2.1: Memory 模块基础数据模型
- 🧱 所属模块：memory
- 📄 依赖设计文档：@/.cursor/rules/memory_module_design.mdc
- 🎯 开发目标：实现 Memory 模块的基础数据模型
- ⏱️ 预计时间：1 天
- ⛓️ 依赖步骤：1.3
- 🧠 Prompt:
```
实现 Memory 模块的基础数据结构:
1. BaseMemory 基类
2. MemoryBlock 类，包括初始化、基本的 alloc 与 dealloc 接口
3. 使用 Pydantic 进行数据验证
4. 实现版本控制相关的数据结构
```

#### 步骤 2.2: Memory 模块存储实现
- 🧱 所属模块：memory
- 📄 依赖设计文档：@/.cursor/rules/memory_module_design.mdc
- 🎯 开发目标：实现 Memory 模块的文件存储功能
- ⏱️ 预计时间：1.5 天
- ⛓️ 依赖步骤：2.1
- 🧠 Prompt:
```
实现 MemoryStore 类:
1. 支持按会话组织内存记录
2. 使用 JSON 文件存储记录
3. 实现版本控制机制
4. 支持记录查询和过滤
```

#### 步骤 2.3: Memory 模块日志功能
- 🧱 所属模块：memory
- 📄 依赖设计文档：@/.cursor/rules/memory_module_design.mdc
- 🎯 开发目标：实现 Memory 模块的日志功能
- ⏱️ 预计时间：1 天
- ⛓️ 依赖步骤：2.2
- 🧠 Prompt:
```
实现日志相关功能:
1. 结构化 JSON 日志记录
2. 纯文本摘要日志输出
3. 日志级别控制
4. 支持将内存记录格式化为日志
```

#### 步骤 2.4: Memory 模块单元测试
- 🧱 所属模块：memory
- 📄 依赖设计文档：@/.cursor/rules/memory_module_design.mdc
- 🎯 开发目标：为 Memory 模块编写单元测试
- ⏱️ 预计时间：1 天
- ⛓️ 依赖步骤：2.1-2.3
- 🧠 Prompt:
```
编写测试用例:
1. 测试内存记录的创建和验证
2. 测试文件存储和加载
3. 测试版本控制功能
4. 测试日志格式化和输出
5. 测试边界条件和错误处理
```

#### 步骤 2.5: Session 模块基础实现
- 🧱 所属模块：session
- 📄 依赖设计文档：@/.cursor/rules/session_module_design.mdc
- 🎯 开发目标：实现 Session 模块的基础功能
- ⏱️ 预计时间：1 天
- ⛓️ 依赖步骤：2.2
- 🧠 Prompt:
```
实现 SessionContext 类:
1. 会话创建和管理
2. 会话元数据存储
3. 会话状态跟踪
4. 与 Memory 模块的集成
```

#### 步骤 2.6: 支持多会话并发环境
- 🧱 所属模块：session
- 📄 依赖设计文档：@/.cursor/rules/session_module_design.mdc
- 🎯 开发目标：为 SessionContext 添加并发会话支持
- ⏱️ 预计时间：0.5 天
- ⛓️ 依赖步骤：2.5
- 🔁 更新依赖：memory 模块可能需线程安全补充
- 🧠 Prompt:
```
为 SessionContext 添加多线程并发环境下的状态隔离能力:
1. 实现会话锁机制
2. 确保资源隔离
3. 必要时补充 Memory 模块的线程安全设计
```

#### 步骤 2.7: Session 错误路径与错误恢复机制
- 🧱 所属模块：session
- 📄 依赖设计文档：@/.cursor/rules/session_module_design.mdc, @/.cursor/rules/errors_module_design.mdc
- 🎯 开发目标：引入错误状态标记与恢复钩子机制
- ⏱️ 预计时间：0.5 天
- ⛓️ 依赖步骤：2.6
- 🔁 更新依赖：errors 模块（新增恢复相关异常）
- 🧠 Prompt:
```
基于 session_module_design.mdc 的 session 错误流程设计:
1. 开发错误恢复钩子
2. 实现会话状态回滚机制
3. 添加测试覆盖 session 崩溃后回滚行为
```

#### 步骤 2.8: Session 模块单元测试
- 🧱 所属模块：session
- 📄 依赖设计文档：@/.cursor/rules/session_module_design.mdc
- 🎯 开发目标：为 Session 模块编写单元测试
- ⏱️ 预计时间：0.5 天
- ⛓️ 依赖步骤：2.5-2.7
- 🧠 Prompt:
```
编写测试用例:
1. 测试会话创建和加载
2. 测试会话状态管理
3. 测试与 Memory 模块的集成
4. 测试会话导出和导入
5. 测试并发会话和错误恢复
```

#### 步骤 2.9: Knowledge 模块基础数据模型
- 🧱 所属模块：knowledge
- 📄 依赖设计文档：@/.cursor/rules/knowledge_module_design.mdc
- 🎯 开发目标：实现 Knowledge 模块的基础数据模型
- ⏱️ 预计时间：1 天
- ⛓️ 依赖步骤：1.4
- 🧠 Prompt:
```
实现以下类:
1. ContentFormat 枚举类型
2. KnowledgeResource 基础类
3. 支持文档和 JSON 格式内容
4. 实现基本的序列化和反序列化方法
```

#### 步骤 2.10: Knowledge 模块存储实现
- 🧱 所属模块：knowledge
- 📄 依赖设计文档：@/.cursor/rules/knowledge_module_design.mdc
- 🎯 开发目标：实现 Knowledge 模块的文件存储功能
- ⏱️ 预计时间：1 天
- ⛓️ 依赖步骤：2.9
- 🧠 Prompt:
```
实现 KnowledgeBase 类:
1. 支持添加、获取、更新和删除资源
2. 使用文件系统存储资源
3. 实现异步保存和加载机制
4. 添加简单的内存缓存
```

#### 步骤 2.11: Knowledge 模块片段提取功能
- 🧱 所属模块：knowledge
- 📄 依赖设计文档：@/.cursor/rules/knowledge_module_design.mdc
- 🎯 开发目标：实现从知识资源中提取特定片段的功能
- ⏱️ 预计时间：1 天
- ⛓️ 依赖步骤：2.10
- 🧠 Prompt:
```
为 KnowledgeResource 添加:
1. 从 JSON 内容提取片段的功能 (支持点表示法)
2. 从文档内容提取章节的功能 (支持标题和正则表达式)
3. 实现 extract_fragment 方法
```

#### 步骤 2.12: Knowledge 模块单元测试
- 🧱 所属模块：knowledge
- 📄 依赖设计文档：@/.cursor/rules/knowledge_module_design.mdc
- 🎯 开发目标：为 Knowledge 模块编写单元测试
- ⏱️ 预计时间：1 天
- ⛓️ 依赖步骤：2.9-2.11
- 🧠 Prompt:
```
编写测试用例:
1. 测试资源的创建、更新和删除
2. 测试文件存储和加载
3. 测试不同格式内容的片段提取
4. 测试异步操作和缓存机制
```

#### 步骤 2.13: LLM 模块基础实现
- 🧱 所属模块：llm
- 📄 依赖设计文档：@/.cursor/rules/llm_module_design.mdc
- 🎯 开发目标：实现 LLM 模块的基础功能
- ⏱️ 预计时间：1.5 天
- ⛓️ 依赖步骤：1.4
- 🧠 Prompt:
```
实现 LLMWorker 类:
1. 统一的 LLM 客户端接口
2. 支持 OpenAI API
3. 请求重试和错误处理
4. 响应解析和格式化
```

#### 步骤 2.14: LLM 模块单元测试
- 🧱 所属模块：llm
- 📄 依赖设计文档：@/.cursor/rules/llm_module_design.mdc
- 🎯 开发目标：为 LLM 模块编写单元测试
- ⏱️ 预计时间：1 天
- ⛓️ 依赖步骤：2.13
- 🧠 Prompt:
```
编写测试用例:
1. 测试 API 调用 (使用 mock)
2. 测试错误处理和重试
3. 测试响应解析
4. 测试不同参数配置
```

#### 步骤 2.15: Prompt 模块模板管理
- 🧱 所属模块：prompt
- 📄 依赖设计文档：@/.cursor/rules/prompt_module_design.mdc
- 🎯 开发目标：实现 Prompt 模块的模板管理功能
- ⏱️ 预计时间：1 天
- ⛓️ 依赖步骤：1.4
- 🧠 Prompt:
```
实现以下功能:
1. 模板加载和注册
2. 模板版本控制
3. 模板格式验证
4. 简单的模板组合机制
```

#### 步骤 2.16: Prompt 模块格式化功能
- 🧱 所属模块：prompt
- 📄 依赖设计文档：@/.cursor/rules/prompt_module_design.mdc
- 🎯 开发目标：实现 Prompt 模块的格式化功能
- ⏱️ 预计时间：1 天
- ⛓️ 依赖步骤：2.15
- 🧠 Prompt:
```
实现 TemplateFormatter 类:
1. 支持变量替换
2. 支持条件语句
3. 支持循环结构
4. 错误处理和默认值
```

#### 步骤 2.17: Prompt 模块与 Knowledge 集成
- 🧱 所属模块：prompt
- 📄 依赖设计文档：@/.cursor/rules/prompt_module_design.mdc, @/.cursor/rules/knowledge_module_design.mdc
- 🎯 开发目标：实现 Prompt 模块与 Knowledge 模块的集成
- ⏱️ 预计时间：1 天
- ⛓️ 依赖步骤：2.11, 2.16
- 🧠 Prompt:
```
实现 KnowledgeAdapter 类:
1. 从知识库提取相关内容
2. 将知识片段集成到提示中
3. 支持知识查询和过滤
4. 处理内容长度限制
```

#### 步骤 2.18: Prompt 模块单元测试
- 🧱 所属模块：prompt
- 📄 依赖设计文档：@/.cursor/rules/prompt_module_design.mdc
- 🎯 开发目标：为 Prompt 模块编写单元测试
- ⏱️ 预计时间：1 天
- ⛓️ 依赖步骤：2.15-2.17
- 🧠 Prompt:
```
编写测试用例:
1. 测试模板加载和验证
2. 测试变量替换和格式化
3. 测试与 Knowledge 模块的集成
4. 测试复杂模板的渲染
```

### 阶段 3: 智能体实现

#### 步骤 3.1: Agents 模块基础实现
- 🧱 所属模块：agents
- 📄 依赖设计文档：@/.cursor/rules/agents_module_design.mdc, @/.cursor/rules/agents_workflow_design.mdc
- 🎯 开发目标：实现 Agents 模块的基础功能和基类
- ⏱️ 预计时间：1 天
- ⛓️ 依赖步骤：2.13
- 🧠 Prompt:
```
实现以下功能:
1. AgentBase 抽象基类
2. 请求和响应数据模型
3. 统一的处理接口
4. 错误处理机制
```

#### 步骤 3.2: Generator Agent 实现
- 🧱 所属模块：agents
- 📄 依赖设计文档：@/.cursor/rules/agents_module_design.mdc, @/.cursor/rules/agents_workflow_design.mdc
- 🎯 开发目标：实现代码生成器 Agent
- ⏱️ 预计时间：1.5 天
- ⛓️ 依赖步骤：3.1
- 🧠 Prompt:
```
实现 GeneratorAgent 类:
1. 实现状态转换逻辑
2. 集成 Prompt 模板
3. 实现代码生成和解析
4. 添加自检功能
```

#### 步骤 3.3: Debugger Agent 实现
- 🧱 所属模块：agents
- 📄 依赖设计文档：@/.cursor/rules/agents_module_design.mdc, @/.cursor/rules/agents_workflow_design.mdc
- 🎯 开发目标：实现代码调试器 Agent
- ⏱️ 预计时间：1.5 天
- ⛓️ 依赖步骤：3.1
- 🧠 Prompt:
```
实现 DebuggerAgent 类:
1. 实现状态转换逻辑
2. 集成 Prompt 模板
3. 实现错误分析和修复
4. 支持多轮调试循环
```

#### 步骤 3.4: Optimizer Agent 实现
- 🧱 所属模块：agents
- 📄 依赖设计文档：@/.cursor/rules/agents_module_design.mdc, @/.cursor/rules/agents_workflow_design.mdc
- 🎯 开发目标：实现代码优化器 Agent
- ⏱️ 预计时间：1.5 天
- ⛓️ 依赖步骤：3.1
- 🧠 Prompt:
```
实现 OptimizerAgent 类:
1. 实现状态转换逻辑
2. 集成 Prompt 模板
3. 实现性能分析和优化建议
4. 支持建议模式和自动优化模式
```

#### 步骤 3.5: Evaluator Agent 实现
- 🧱 所属模块：agents
- 📄 依赖设计文档：@/.cursor/rules/agents_module_design.mdc, @/.cursor/rules/agents_workflow_design.mdc
- 🎯 开发目标：实现代码评估器 Agent
- ⏱️ 预计时间：1.5 天
- ⛓️ 依赖步骤：3.1
- 🧠 Prompt:
```
实现 EvaluatorAgent 类:
1. 实现状态转换逻辑
2. 集成 Prompt 模板
3. 实现功能和性能评估
4. 生成标准化评估报告
```

#### 步骤 3.6: Agent Registry 与动态创建
- 🧱 所属模块：agents
- 📄 依赖设计文档：@/.cursor/rules/agents_module_design.mdc
- 🎯 开发目标：支持注册/创建具体 agent 实例
- ⏱️ 预计时间：0.5 天
- ⛓️ 依赖步骤：3.1-3.5
- 🧠 Prompt:
```
实现 AgentRegistry:
1. 支持基于配置创建 agent 实例
2. 注册命名 Agent 并通过 config 构造
3. 实现 agent 工厂模式
```

#### 步骤 3.7: Agents 模块单元测试
- 🧱 所属模块：agents
- 📄 依赖设计文档：@/.cursor/rules/agents_module_design.mdc, @/.cursor/rules/agents_workflow_design.mdc
- 🎯 开发目标：为 Agents 模块编写单元测试
- ⏱️ 预计时间：2 天
- ⛓️ 依赖步骤：3.1-3.6
- 🧠 Prompt:
```
编写测试用例:
1. 测试各 Agent 的状态转换
2. 测试请求处理和响应生成
3. 测试错误处理机制
4. 使用 mock LLM 进行集成测试
```

#### 步骤 3.8: Prompt 模板实现 - Generator
- 🧱 所属模块：prompt
- 📄 依赖设计文档：@/.cursor/rules/prompt_module_design.mdc, @/.cursor/rules/agents_workflow_design.mdc
- 🎯 开发目标：实现 Generator Agent 的 Prompt 模板
- ⏱️ 预计时间：0.5 天
- ⛓️ 依赖步骤：2.16, 3.2
- 🧠 Prompt:
```
创建以下模板:
1. 需求解析模板
2. 算法选择模板
3. 代码生成模板
4. 自检模板
按照 agents_workflow_design.mdc 中的设计实现
```

#### 步骤 3.9: Prompt 模板实现 - Debugger
- 🧱 所属模块：prompt
- 📄 依赖设计文档：@/.cursor/rules/prompt_module_design.mdc, @/.cursor/rules/agents_workflow_design.mdc
- 🎯 开发目标：实现 Debugger Agent 的 Prompt 模板
- ⏱️ 预计时间：0.5 天
- ⛓️ 依赖步骤：2.16, 3.3
- 🧠 Prompt:
```
创建以下模板:
1. 错误分析模板
2. 问题定位模板
3. 修复方案生成模板
4. 验证模板
按照 agents_workflow_design.mdc 中的设计实现
```

#### 步骤 3.10: Prompt 模板实现 - Optimizer
- 🧱 所属模块：prompt
- 📄 依赖设计文档：@/.cursor/rules/prompt_module_design.mdc, @/.cursor/rules/agents_workflow_design.mdc
- 🎯 开发目标：实现 Optimizer Agent 的 Prompt 模板
- ⏱️ 预计时间：0.5 天
- ⛓️ 依赖步骤：2.16, 3.4
- 🧠 Prompt:
```
创建以下模板:
1. 性能分析模板
2. 瓶颈识别模板
3. 优化策略生成模板
4. 建议生成模板
按照 agents_workflow_design.mdc 中的设计实现
```

#### 步骤 3.11: Prompt 模板实现 - Evaluator
- 🧱 所属模块：prompt
- 📄 依赖设计文档：@/.cursor/rules/prompt_module_design.mdc, @/.cursor/rules/agents_workflow_design.mdc
- 🎯 开发目标：实现 Evaluator Agent 的 Prompt 模板
- ⏱️ 预计时间：0.5 天
- ⛓️ 依赖步骤：2.16, 3.5
- 🧠 Prompt:
```
创建以下模板:
1. 测试准备模板
2. 功能测试模板
3. 性能测试模板
4. 结果分析模板
按照 agents_workflow_design.mdc 中的设计实现
```

### 阶段 4: 工作流与系统集成

#### 步骤 4.1: Workflows 模块基础实现
- 🧱 所属模块：workflows
- 📄 依赖设计文档：@/.cursor/rules/workflows_module_design.mdc
- 🎯 开发目标：实现 Workflows 模块的基础功能
- ⏱️ 预计时间：1.5 天
- ⛓️ 依赖步骤：3.7
- 🧠 Prompt:
```
实现以下功能:
1. 轻量级消息队列
2. 任务定义和执行
3. 工作流定义和验证
4. 基本的条件分支支持
```

#### 步骤 4.2: 状态机实现
- 🧱 所属模块：workflows
- 📄 依赖设计文档：@/.cursor/rules/workflows_module_design.mdc, @/.cursor/rules/agents_workflow_design.mdc
- 🎯 开发目标：实现基于状态机的工作流控制
- ⏱️ 预计时间：2 天
- ⛓️ 依赖步骤：4.1
- 🧠 Prompt:
```
实现以下功能:
1. 状态定义和转换规则
2. 事件触发机制
3. 状态持久化
4. 错误状态处理
```

#### 步骤 4.3: 算子开发工作流实现
- 🧱 所属模块：workflows
- 📄 依赖设计文档：@/.cursor/rules/workflows_module_design.mdc, @/.cursor/rules/agents_workflow_design.mdc
- 🎯 开发目标：实现算子开发的完整工作流
- ⏱️ 预计时间：1.5 天
- ⛓️ 依赖步骤：4.2
- 🧠 Prompt:
```
