# Pinocchio 多智能体系统 Memory 模块设计文档

## 1. 概述

Memory 模块是 Pinocchio 多智能体系统的核心组件，专门为高性能代码生成和调优设计。该模块负责存储和管理系统运行过程中的各类数据，包括代码版本、Agent交互记录、性能指标、优化技术历史等。采用分层设计，确保数据的类型安全、持久化和高效检索。

---

## 2. 技术选型

### 2.1 核心技术栈

| 技术/库 | 用途 | 选择理由 |
|-----|-----|---|
| Pydantic | 数据模型定义与验证 | 提供运行时类型验证，自动序列化/反序列化，与现代Python类型注解系统完美配合 |
| JSON | 数据序列化格式 | 人类可读性强，与LLM接口天然兼容，序列化/反序列化性能良好 |
| Python标准库 | 文件操作、路径管理等 | 减少外部依赖，提高可移植性 |
| UUID | 唯一标识符生成 | 保证各类数据实体的唯一性 |

### 2.2 可选优化技术

| 技术/库 | 用途 | 备注 |
|-----|-----|---|
| orjson | 高性能JSON序列化 | 比标准json库更高效，可选依赖 |
| aiofiles | 异步文件IO | 如需异步操作可引入 |

---

## 3. 模块架构

### 3.1 整体架构

```
memory/
├── __init__.py
├── models/                    # 内存相关数据模型
│   ├── __init__.py
│   ├── base.py               # 基础内存模型
│   ├── code.py               # 代码版本模型
│   ├── agent_memories.py     # Agent内存模型
│   ├── performance.py        # 性能指标模型
│   └── optimization.py       # 优化技术模型
├── manager.py                # 内存管理器
└── metrics.py                # 性能指标收集
```

### 3.2 重构后的职责分离

重构后，Memory模块专注于高性能代码生成和调优相关的数据模型：

- **Memory模块**：专注于内存管理、代码版本、Agent内存、性能指标、优化技术
- **Prompt模块**：专注于提示模板管理和版本控制（已移至prompt/models/）
- **Knowledge模块**：专注于知识资源管理（已移至knowledge/models/）
- **Session模块**：专注于会话生命周期管理（已移至session/models/）

---

## 4. 数据模型设计

### 4.1 基础数据模型

```python
from pydantic import BaseModel, Field
from typing import Dict, List, Optional, Any, Union
from datetime import datetime
import uuid

class BaseMemory(BaseModel):
    """所有内存记录的基类"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    session_id: str  # 关联的会话ID
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    agent_type: str  # generator, debugger, evaluator
    version_id: str  # 版本ID，用于版本管理
    parent_version_id: Optional[str] = None  # 父版本ID，用于版本追踪
```

### 4.2 代码版本模型

```python
class CodeVersion(BaseModel):
    """代码版本记录"""
    version_id: str  # 版本ID，自动生成
    session_id: str  # 会话ID
    code: str  # 代码内容
    language: str  # 代码语言
    kernel_type: str  # 内核类型
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    source_agent: str  # 产生代码的Agent类型：generator或debugger
    parent_version_id: Optional[str] = None  # 父版本ID
    description: str = ""  # 版本描述
    optimization_techniques: List[str] = Field(default_factory=list)  # 使用的优化技术
    hyperparameters: Dict[str, Any] = Field(default_factory=dict)  # 优化技术超参数
    metadata: Dict[str, Any] = Field(default_factory=dict)  # 元数据

    @classmethod
    def create_new_version(cls, session_id: str, code: str, language: str, kernel_type: str,
                          source_agent: str, optimization_techniques: List[str] = None,
                          hyperparameters: Dict[str, Any] = None, parent_version_id: Optional[str] = None,
                          description: str = ""):
        """创建新版本"""
        import hashlib
        import time

        # 使用代码内容和时间戳生成版本ID
        hash_input = f"{session_id}:{code}:{time.time()}"
        hash_object = hashlib.sha256(hash_input.encode())
        version_id = hash_object.hexdigest()[:12]

        return cls(
            version_id=version_id,
            session_id=session_id,
            code=code,
            language=language,
            kernel_type=kernel_type,
            source_agent=source_agent,
            optimization_techniques=optimization_techniques or [],
            hyperparameters=hyperparameters or {},
            parent_version_id=parent_version_id,
            description=description
        )

class CodeMemory(BaseModel):
    """代码版本历史"""
    session_id: str  # 会话ID
    versions: Dict[str, CodeVersion] = Field(default_factory=dict)  # 版本ID -> 版本对象
    current_version_id: Optional[str] = None  # 当前版本ID

    def add_version(self, version: CodeVersion) -> str:
        """添加新版本"""
        self.versions[version.version_id] = version
        self.current_version_id = version.version_id
        return version.version_id

    def get_current_version(self) -> Optional[CodeVersion]:
        """获取当前版本"""
        if self.current_version_id:
            return self.versions.get(self.current_version_id)
        return None

    def get_version_history(self) -> List[Dict[str, Any]]:
        """获取版本历史"""
        return [
            {
                "version_id": version.version_id,
                "source_agent": version.source_agent,
                "description": version.description,
                "timestamp": version.timestamp,
                "optimization_techniques": version.optimization_techniques,
                "is_current": version.version_id == self.current_version_id
            }
            for version in self.versions.values()
        ]
```

### 4.3 Agent内存模型

```python
class BaseAgentMemory(BaseModel):
    """基础Agent内存模型"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    session_id: str  # 会话ID
    agent_type: str  # generator, debugger, evaluator
    version_id: str  # 版本ID
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    input_data: Dict[str, Any]  # 输入数据
    output_data: Dict[str, Any]  # 输出数据
    processing_time_ms: int  # 处理时间
    status: str = "success"  # success, error
    error_details: Optional[Dict[str, Any]] = None  # 错误详情
    code_version_id: Optional[str] = None  # 关联的代码版本ID
    parent_version_id: Optional[str] = None  # 父版本ID

class GeneratorMemory(BaseAgentMemory):
    """生成器内存"""
    agent_type: str = "generator"
    generation_strategy: str  # 使用的生成策略
    optimization_techniques: List[str] = Field(default_factory=list)  # 使用的优化技术列表
    hyperparameters: Dict[str, Any] = Field(default_factory=dict)     # 优化技术超参数
    kernel_type: str = ""                                             # 内核类型
    language: str = ""                                                # 代码语言
    comments: List[str] = Field(default_factory=list)                # 优化说明
    knowledge_fragments: Dict[str, Any] = Field(default_factory=dict)  # 使用的知识片段

class DebuggerMemory(BaseAgentMemory):
    """调试器内存"""
    agent_type: str = "debugger"
    compilation_status: str = "unknown"                               # 编译状态
    runtime_status: str = "unknown"                                   # 运行状态
    performance_metrics: Dict[str, Any] = Field(default_factory=dict) # 性能指标
    modified_code: Optional[str] = None                               # 修改后的代码
    errors: List[str] = Field(default_factory=list)                  # 错误列表
    warnings: List[str] = Field(default_factory=list)                # 警告列表
    execution_log: List[str] = Field(default_factory=list)           # 执行日志
    # 重要约束：不能修改Generator的优化技术和超参数
    preserved_optimization_techniques: List[str] = Field(default_factory=list)  # 保持的优化技术
    preserved_hyperparameters: Dict[str, Any] = Field(default_factory=dict)     # 保持的超参数

class EvaluatorMemory(BaseAgentMemory):
    """评估器内存"""
    agent_type: str = "evaluator"
    current_optimization_techniques: List[str] = Field(default_factory=list) # 当前优化技术
    current_hyperparameters: Dict[str, Any] = Field(default_factory=dict)   # 当前超参数
    optimization_suggestions: Dict[str, Any] = Field(default_factory=dict) # 优化建议
    performance_analysis: Dict[str, Any] = Field(default_factory=dict)     # 性能分析
    next_iteration_prompt: str = ""                                        # 下一轮优化指导
    bottlenecks: List[str] = Field(default_factory=list)                   # 性能瓶颈
    target_performance: Dict[str, Any] = Field(default_factory=dict)      # 目标性能
```

### 4.4 性能指标模型

```python
class PerformanceMetrics(BaseModel):
    """性能指标模型"""
    execution_time_ms: float  # 执行时间（毫秒）
    memory_usage_mb: float  # 内存使用量（MB）
    cache_miss_rate: Optional[float] = None  # 缓存未命中率
    cpu_utilization: Optional[float] = None  # CPU利用率
    throughput: Optional[float] = None  # 吞吐量
    latency: Optional[float] = None  # 延迟
    power_consumption: Optional[float] = None  # 功耗
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    session_id: str  # 会话ID
    code_version_id: str  # 代码版本ID
    agent_type: str  # 产生性能指标的Agent类型

class PerformanceHistory(BaseModel):
    """性能历史"""
    session_id: str  # 会话ID
    metrics: List[PerformanceMetrics] = Field(default_factory=list)  # 性能指标列表

    def add_metrics(self, metrics: PerformanceMetrics) -> None:
        """添加性能指标"""
        self.metrics.append(metrics)

    def get_latest_metrics(self) -> Optional[PerformanceMetrics]:
        """获取最新的性能指标"""
        if self.metrics:
            return self.metrics[-1]
        return None

    def get_performance_trend(self) -> Dict[str, List[float]]:
        """获取性能趋势"""
        if not self.metrics:
            return {}

        trend = {
            "execution_time": [m.execution_time_ms for m in self.metrics],
            "memory_usage": [m.memory_usage_mb for m in self.metrics],
            "timestamps": [m.timestamp.isoformat() for m in self.metrics]
        }

        if any(m.cache_miss_rate is not None for m in self.metrics):
            trend["cache_miss_rate"] = [m.cache_miss_rate or 0.0 for m in self.metrics]

        return trend
```

### 4.5 优化技术模型

```python
class OptimizationTechnique(BaseModel):
    """优化技术模型"""
    name: str  # 技术名称
    category: str  # 技术类别（tiling, vectorization, multibuffering, prefetch等）
    description: str  # 技术描述
    hyperparameters: Dict[str, Any]  # 超参数定义
    applicable_scenarios: List[str]  # 适用场景
    expected_improvement: str  # 预期改进
    implementation_guide: str  # 实现指南
    examples: List[str] = Field(default_factory=list)  # 示例代码

class OptimizationHistory(BaseModel):
    """优化历史"""
    session_id: str  # 会话ID
    techniques_used: List[str] = Field(default_factory=list)  # 使用的技术
    hyperparameter_history: List[Dict[str, Any]] = Field(default_factory=list)  # 超参数历史
    performance_impact: Dict[str, float] = Field(default_factory=dict)  # 性能影响
    iteration_count: int = 0  # 迭代次数

    def add_iteration(self, techniques: List[str], hyperparameters: Dict[str, Any],
                     performance_impact: Dict[str, float]) -> None:
        """添加一次迭代"""
        self.techniques_used = techniques
        self.hyperparameter_history.append(hyperparameters)
        self.performance_impact = performance_impact
        self.iteration_count += 1

    def get_optimization_summary(self) -> Dict[str, Any]:
        """获取优化摘要"""
        return {
            "total_iterations": self.iteration_count,
            "techniques_used": self.techniques_used,
            "current_hyperparameters": self.hyperparameter_history[-1] if self.hyperparameter_history else {},
            "performance_impact": self.performance_impact
        }
```

---

## 5. 核心接口设计

### 5.1 内存管理器接口

```python
class MemoryManager:
    """内存管理器"""

    def __init__(self, store_dir: str = "./memory_store"):
        """初始化内存管理器"""
        pass

    def store_agent_memory(self, memory: BaseAgentMemory) -> str:
        """存储Agent内存"""
        pass

    def log_generator_interaction(self,
                                session_id: str,
                                input_data: Dict[str, Any],
                                output_data: Dict[str, Any],
                                processing_time_ms: int,
                                generation_strategy: str,
                                optimization_techniques: List[str],
                                hyperparameters: Dict[str, Any],
                                knowledge_fragments: Dict[str, Any],
                                status: str = "success",
                                error_details: Optional[Dict[str, Any]] = None) -> Tuple[str, str]:
        """记录生成器交互"""
        pass

    def log_debugger_interaction(self,
                               session_id: str,
                               input_data: Dict[str, Any],
                               output_data: Dict[str, Any],
                               processing_time_ms: int,
                               compilation_status: str,
                               runtime_status: str,
                               performance_metrics: Dict[str, Any],
                               errors: List[str],
                               warnings: List[str],
                               execution_log: List[str],
                               modified_code: Optional[str] = None,
                               status: str = "success",
                               error_details: Optional[Dict[str, Any]] = None) -> Tuple[str, str]:
        """记录调试器交互"""
        pass

    def log_evaluator_interaction(self,
                                session_id: str,
                                input_data: Dict[str, Any],
                                output_data: Dict[str, Any],
                                processing_time_ms: int,
                                current_optimization_techniques: List[str],
                                current_hyperparameters: Dict[str, Any],
                                optimization_suggestions: Dict[str, Any],
                                performance_analysis: Dict[str, Any],
                                next_iteration_prompt: str,
                                status: str = "success",
                                error_details: Optional[Dict[str, Any]] = None) -> str:
        """记录评估器交互"""
        pass

    def add_code_version(self, session_id: str, code: str, language: str, kernel_type: str,
                        source_agent: str, optimization_techniques: List[str] = None,
                        hyperparameters: Dict[str, Any] = None, parent_version_id: Optional[str] = None,
                        description: str = "") -> str:
        """添加新代码版本"""
        pass

    def get_current_code(self, session_id: str) -> Optional[str]:
        """获取当前代码"""
        pass

    def get_code_version(self, session_id: str, version_id: Optional[str] = None) -> Optional[CodeVersion]:
        """获取指定代码版本"""
        pass

    def add_performance_metrics(self, session_id: str, code_version_id: str, agent_type: str,
                              execution_time_ms: float, memory_usage_mb: float,
                              cache_miss_rate: Optional[float] = None,
                              cpu_utilization: Optional[float] = None,
                              throughput: Optional[float] = None,
                              latency: Optional[float] = None,
                              power_consumption: Optional[float] = None) -> str:
        """添加性能指标"""
        pass

    def get_performance_history(self, session_id: str) -> PerformanceHistory:
        """获取性能历史"""
        pass

    def update_optimization_history(self, session_id: str, techniques: List[str],
                                  hyperparameters: Dict[str, Any],
                                  performance_impact: Dict[str, float]) -> None:
        """更新优化历史"""
        pass

    def get_optimization_summary(self, session_id: str) -> Dict[str, Any]:
        """获取优化摘要"""
        pass

    def query_agent_memories(self,
                           session_id: str,
                           agent_type: Optional[str] = None,
                           filter_func = None,
                           limit: int = 10) -> List[BaseAgentMemory]:
        """查询Agent内存记录"""
        pass

    def export_logs(self, session_id: str, output_file: Optional[str] = None) -> str:
        """导出日志"""
        pass
```

---

## 6. 存储策略

### 6.1 文件结构

```
memory_store/
├── session_{timestamp}_{random}/  # 会话目录
│   ├── code_memory.json           # 代码版本历史
│   ├── performance_history.json   # 性能历史
│   ├── optimization_history.json  # 优化历史
│   └── memories/                  # Agent内存目录
│       ├── generator_{uuid}.json  # 生成器内存
│       ├── debugger_{uuid}.json   # 调试器内存
│       └── evaluator_{uuid}.json  # 评估器内存
└── session_{timestamp}_{random}/  # 另一个会话目录
    └── ...
```

### 6.2 序列化策略

- 使用Pydantic的`json()`方法序列化模型
- 文件写入采用原子操作，确保数据一致性
- 大文件采用分块写入，避免内存占用过高

### 6.3 缓存策略

- 活跃会话的内存保持在内存中
- 使用简单的内存缓存加速查询
- 定期将内存数据刷新到磁盘

---

## 7. 代码示例

### 7.1 创建会话并记录Agent交互

```python
from memory.models import BaseMemory, CodeVersion, CodeMemory, GeneratorMemory, DebuggerMemory, EvaluatorMemory
from memory.models.performance import PerformanceMetrics, PerformanceHistory
from memory.models.optimization import OptimizationHistory
import time

# 创建内存管理器
memory_manager = MemoryManager()

# 模拟Generator交互
generator_input = {
    "user_requirement": "实现高效的矩阵乘法算子",
    "knowledge_fragments": {
        "domain_knowledge": "矩阵运算的数学原理",
        "optimization_techniques": "tiling, vectorization",
        "dsl_syntax": "Choreo DSL语法"
    }
}

generator_output = {
    "code": "def matmul(A, B):\n    C = alloc(A.shape[0], B.shape[1])\n    for i in range(A.shape[0]):\n        for j in range(B.shape[1]):\n            for k in range(A.shape[1]):\n                C[i, j] += A[i, k] * B[k, j]\n    return C",
    "language": "Choreo DSL",
    "kernel_type": "matrix_multiplication",
    "optimization_techniques": ["tiling", "vectorization"],
    "hyperparameters": {"tile_size": 32, "vector_width": 8}
}

# 记录Generator交互
generator_memory_id, code_version_id = memory_manager.log_generator_interaction(
    session_id="session_123",
    input_data=generator_input,
    output_data=generator_output,
    processing_time_ms=1200,
    generation_strategy="optimization_aware",
    optimization_techniques=["tiling", "vectorization"],
    hyperparameters={"tile_size": 32, "vector_width": 8},
    knowledge_fragments=generator_input["knowledge_fragments"]
)

print(f"Generator memory ID: {generator_memory_id}")
print(f"Code version ID: {code_version_id}")

# 模拟Debugger交互
debugger_input = {
    "generator_output": generator_output
}

debugger_output = {
    "compilation_status": "success",
    "runtime_status": "success",
    "performance_metrics": {
        "execution_time_ms": 45.2,
        "memory_usage_mb": 128.5,
        "cache_miss_rate": 0.15
    },
    "errors": [],
    "warnings": ["Consider using larger tile size for better cache performance"],
    "execution_log": ["Compilation successful", "Runtime execution completed"]
}

# 记录Debugger交互
debugger_memory_id, new_code_version_id = memory_manager.log_debugger_interaction(
    session_id="session_123",
    input_data=debugger_input,
    output_data=debugger_output,
    processing_time_ms=800,
    compilation_status="success",
    runtime_status="success",
    performance_metrics=debugger_output["performance_metrics"],
    errors=debugger_output["errors"],
    warnings=debugger_output["warnings"],
    execution_log=debugger_output["execution_log"]
)

print(f"Debugger memory ID: {debugger_memory_id}")
print(f"New code version ID: {new_code_version_id}")

# 添加性能指标
memory_manager.add_performance_metrics(
    session_id="session_123",
    code_version_id=new_code_version_id,
    agent_type="debugger",
    execution_time_ms=45.2,
    memory_usage_mb=128.5,
    cache_miss_rate=0.15,
    cpu_utilization=85.3
)
```

### 7.2 查询和导出会话

```python
# 获取代码版本历史
code_memory = memory_manager.get_code_memory("session_123")
history = code_memory.get_version_history()

print(f"Code version history:")
for version in history:
    print(f"  {version['version_id']} - {version['source_agent']} - {version['description']}")
    print(f"    Optimization techniques: {version['optimization_techniques']}")

# 获取性能历史
performance_history = memory_manager.get_performance_history("session_123")
trend = performance_history.get_performance_trend()

print(f"Performance trend:")
print(f"  Execution times: {trend['execution_time']}")
print(f"  Memory usage: {trend['memory_usage']}")

# 获取优化摘要
optimization_summary = memory_manager.get_optimization_summary("session_123")
print(f"Optimization summary:")
print(f"  Total iterations: {optimization_summary['total_iterations']}")
print(f"  Techniques used: {optimization_summary['techniques_used']}")
print(f"  Performance impact: {optimization_summary['performance_impact']}")

# 导出会话日志
export_path = memory_manager.export_logs("session_123")
print(f"Session exported to: {export_path}")
```

---

## 8. 性能考虑

### 8.1 内存占用优化

- 大型代码版本按需加载
- 历史记录采用惰性加载
- 会话数据定期归档

### 8.2 IO性能优化

- 批量写入而非频繁单条写入
- 使用缓冲区减少IO操作
- 文件分割避免单文件过大

### 8.3 查询性能优化

- 内存索引加速常用查询
- 按时间倒序组织数据
- 缓存最近访问的记录

---

## 9. 扩展性考虑

虽然当前设计专注于单机实现，但保留了未来扩展的可能性：

### 9.1 接口抽象

- 存储接口与实现分离
- 会话管理与内存管理解耦
- 统一的序列化/反序列化策略

### 9.2 可扩展点

- 存储后端可替换为分布式存储
- 缓存策略可升级为分布式缓存
- 会话管理可扩展为多用户支持

---

## 10. 重构后的优势

### 10.1 模块职责清晰

- **Memory模块**：专注于内存管理、代码版本、Agent内存、性能指标、优化技术
- **Prompt模块**：专注于提示模板管理和版本控制
- **Knowledge模块**：专注于知识资源管理
- **Session模块**：专注于会话生命周期管理

### 10.2 符合设计原则

- **单一职责原则**：每个模块只管理自己的数据模型
- **开闭原则**：模块可以独立扩展，不影响其他模块
- **依赖倒置原则**：通过统一的数据模型接口实现模块间解耦

### 10.3 便于开发和维护

- **独立开发**：不同团队可以独立开发不同模块
- **独立测试**：每个模块的数据模型可以独立测试
- **版本管理**：每个模块的数据模型可以独立版本控制

---

## 11. 总结

重构后的Memory模块设计采用了分层架构，专门为高性能代码生成和调优设计。通过Pydantic提供类型安全，通过会话隔离保证数据独立性，通过专门的代码版本管理支持代码追踪，通过性能指标和优化技术模型支持性能优化。

核心特点包括：

1. **会话隔离**：每次运行系统创建独立会话，确保任务间数据不混淆
2. **代码版本管理**：专门的代码版本跟踪，支持版本历史和回溯
3. **角色特定内存**：为不同Agent角色设计特定内存结构
4. **性能指标追踪**：完整的性能指标收集和分析
5. **优化技术管理**：优化技术的使用历史和效果分析
6. **类型安全**：使用Pydantic确保数据一致性和类型安全
7. **持久化存储**：JSON格式持久化，支持导入/导出
8. **模块职责分离**：重构后专注于高性能代码生成和调优相关功能

该设计满足了Pinocchio系统对高性能代码生成和调优的需求，提供了高效、可靠的内存管理，支持多智能体协作过程中的数据存储、检索和共享。

---

## 12. 测试策略

### 12.1 测试范围

Memory模块的测试应覆盖以下关键方面：

1. **数据模型测试**
   - 验证所有Pydantic模型的序列化/反序列化
   - 测试模型字段验证和默认值
   - 验证模型方法（如`CodeVersion.create_new_version`）

2. **存储操作测试**
   - 文件写入/读取操作
   - 原子性和并发安全性
   - 错误处理和恢复

3. **管理器接口测试**
   - 所有公共API的功能验证
   - 边界条件和异常处理
   - 不同Agent类型的内存记录

4. **版本管理测试**
   - 代码版本创建和检索
   - 版本历史和关系维护
   - 版本ID生成的一致性

5. **性能指标测试**
   - 性能指标收集和存储
   - 性能趋势分析
   - 性能历史查询

6. **优化技术测试**
   - 优化技术使用记录
   - 优化历史追踪
   - 优化效果分析

### 12.2 测试夹具

```python
@pytest.fixture
def temp_memory_store(tmp_path):
    """创建临时内存存储目录"""
    store_dir = tmp_path / "memory_store"
    store_dir.mkdir()
    return store_dir

@pytest.fixture
def memory_manager(temp_memory_store):
    """创建内存管理器实例"""
    from memory.manager import MemoryManager
    return MemoryManager(store_dir=str(temp_memory_store))

@pytest.fixture
def sample_code():
    """提供样本代码"""
    return "def example():\n    return 'Hello, World!'"

@pytest.fixture
def code_memory_with_version(memory_manager, sample_code):
    """创建包含版本的代码内存"""
    code_version_id = memory_manager.add_code_version(
        session_id="test_session",
        code=sample_code,
        language="Python",
        kernel_type="example",
        source_agent="generator",
        optimization_techniques=["basic"],
        description="Initial version"
    )
    return memory_manager.get_code_memory("test_session"), code_version_id
```

### 12.3 测试用例示例

#### 12.3.1 模型测试

```python
def test_code_version_creation():
    """测试代码版本创建"""
    version = CodeVersion.create_new_version(
        session_id="test_session",
        code="def example(): pass",
        language="Python",
        kernel_type="test",
        source_agent="generator",
        optimization_techniques=["tiling"],
        hyperparameters={"tile_size": 32},
        description="Test version"
    )

    assert version.code == "def example(): pass"
    assert version.language == "Python"
    assert version.source_agent == "generator"
    assert version.optimization_techniques == ["tiling"]
    assert version.hyperparameters == {"tile_size": 32}
    assert version.description == "Test version"
    assert version.version_id is not None
    assert version.parent_version_id is None

def test_code_version_serialization():
    """测试代码版本序列化"""
    version = CodeVersion.create_new_version(
        session_id="test_session",
        code="def test(): pass",
        language="Python",
        kernel_type="test",
        source_agent="generator"
    )

    json_str = version.json()
    deserialized = CodeVersion.parse_raw(json_str)

    assert deserialized.version_id == version.version_id
    assert deserialized.code == version.code
    assert deserialized.language == version.language
```

#### 12.3.2 存储测试

```python
def test_store_agent_memory(memory_manager):
    """测试存储Agent内存"""
    memory = GeneratorMemory(
        session_id="test_session",
        agent_type="generator",
        version_id="v1",
        input_data={"prompt": "Generate code"},
        output_data={"code": "def test(): pass", "optimization_techniques": ["tiling"]},
        processing_time_ms=100,
        generation_strategy="optimization_aware",
        optimization_techniques=["tiling"],
        hyperparameters={"tile_size": 32},
        knowledge_fragments={"domain_knowledge": "test"}
    )

    memory_id = memory_manager.store_agent_memory(memory)

    assert memory_id is not None
    # 验证文件是否已创建
    memory_file = memory_manager.store_dir / "test_session" / "agent_memories" / f"generator_{memory_id}.json"
    assert memory_file.exists()

def test_memory_retrieval(memory_manager):
    """测试内存检索"""
    # 先存储一条内存记录
    memory = GeneratorMemory(
        session_id="test_session",
        agent_type="generator",
        version_id="v1",
        input_data={"prompt": "Generate code"},
        output_data={"code": "def test(): pass"},
        processing_time_ms=100,
        generation_strategy="default",
        optimization_techniques=["basic"]
    )
    memory_id = memory_manager.store_agent_memory(memory)

    # 检索并验证
    retrieved = memory_manager.get_agent_memory(memory_id)
    assert retrieved is not None
    assert retrieved.id == memory_id
    assert retrieved.input_data == memory.input_data
    assert retrieved.optimization_techniques == memory.optimization_techniques
```

#### 12.3.3 管理器接口测试

```python
def test_log_generator_interaction(memory_manager):
    """测试记录生成器交互"""
    input_data = {"prompt": "Generate matrix multiplication code"}
    output_data = {"code": "def matmul(A, B): pass", "optimization_techniques": ["tiling"]}

    memory_id, code_version_id = memory_manager.log_generator_interaction(
        session_id="test_session",
        input_data=input_data,
        output_data=output_data,
        processing_time_ms=200,
        generation_strategy="optimization_aware",
        optimization_techniques=["tiling"],
        hyperparameters={"tile_size": 32},
        knowledge_fragments={"domain_knowledge": "matrix operations"}
    )

    assert memory_id is not None
    assert code_version_id is not None

    # 验证代码版本
    code_version = memory_manager.get_code_version("test_session", code_version_id)
    assert code_version is not None
    assert code_version.code == output_data["code"]
    assert code_version.source_agent == "generator"
    assert code_version.optimization_techniques == ["tiling"]

def test_log_debugger_interaction(memory_manager):
    """测试记录调试器交互"""
    # 先创建Generator交互
    generator_memory_id, code_version_id = memory_manager.log_generator_interaction(
        session_id="test_session",
        input_data={"prompt": "Generate code"},
        output_data={"code": "def test(): pass"},
        processing_time_ms=100,
        generation_strategy="default",
        optimization_techniques=["basic"],
        hyperparameters={},
        knowledge_fragments={}
    )

    # 记录Debugger交互
    debugger_memory_id, new_code_version_id = memory_manager.log_debugger_interaction(
        session_id="test_session",
        input_data={"generator_output": {"code": "def test(): pass"}},
        output_data={
            "compilation_status": "success",
            "runtime_status": "success",
            "performance_metrics": {"execution_time_ms": 45.2, "memory_usage_mb": 128.5}
        },
        processing_time_ms=80,
        compilation_status="success",
        runtime_status="success",
        performance_metrics={"execution_time_ms": 45.2, "memory_usage_mb": 128.5},
        errors=[],
        warnings=[],
        execution_log=["Compilation successful"]
    )

    assert debugger_memory_id is not None
    assert new_code_version_id is not None

def test_performance_metrics(memory_manager):
    """测试性能指标"""
    # 先创建代码版本
    code_version_id = memory_manager.add_code_version(
        session_id="test_session",
        code="def test(): pass",
        language="Python",
        kernel_type="test",
        source_agent="generator"
    )

    # 添加性能指标
    metrics_id = memory_manager.add_performance_metrics(
        session_id="test_session",
        code_version_id=code_version_id,
        agent_type="debugger",
        execution_time_ms=45.2,
        memory_usage_mb=128.5,
        cache_miss_rate=0.15,
        cpu_utilization=85.3
    )

    assert metrics_id is not None

    # 获取性能历史
    performance_history = memory_manager.get_performance_history("test_session")
    assert performance_history is not None
    assert len(performance_history.metrics) == 1

    latest_metrics = performance_history.get_latest_metrics()
    assert latest_metrics is not None
    assert latest_metrics.execution_time_ms == 45.2
    assert latest_metrics.memory_usage_mb == 128.5
    assert latest_metrics.cache_miss_rate == 0.15
    assert latest_metrics.cpu_utilization == 85.3

def test_optimization_history(memory_manager):
    """测试优化历史"""
    # 更新优化历史
    memory_manager.update_optimization_history(
        session_id="test_session",
        techniques=["tiling", "vectorization"],
        hyperparameters={"tile_size": 32, "vector_width": 8},
        performance_impact={"execution_time_ms": 45.2, "memory_usage_mb": 128.5}
    )

    # 获取优化摘要
    summary = memory_manager.get_optimization_summary("test_session")
    assert summary["total_iterations"] == 1
    assert summary["techniques_used"] == ["tiling", "vectorization"]
    assert summary["current_hyperparameters"] == {"tile_size": 32, "vector_width": 8}
    assert summary["performance_impact"] == {"execution_time_ms": 45.2, "memory_usage_mb": 128.5}
```

### 12.4 集成测试重点

1. **与Session模块集成**
   - 验证会话创建时内存初始化
   - 测试会话加载/保存对内存的影响
   - 验证跨会话的内存隔离

2. **与Agent模块集成**
   - 测试Agent交互记录的完整流程
   - 验证不同Agent类型的内存记录差异
   - 测试性能指标收集和优化历史追踪

3. **文件系统交互**
   - 验证大量数据的性能表现
   - 测试并发访问的安全性
   - 验证错误恢复机制

### 12.5 性能测试

1. **大数据量测试**
   - 测试处理大型代码文件的性能
   - 验证大量Agent交互记录的存储和检索性能
   - 测试内存占用随数据增长的变化

2. **并发测试**
   - 验证多线程环境下的数据一致性
   - 测试并发读写操作的性能
   - 验证锁机制的有效性

3. **性能指标测试**
   - 测试性能指标收集的性能
   - 验证性能趋势分析的准确性
   - 测试优化历史追踪的效率

通过全面的测试策略，确保Memory模块的稳定性、正确性和性能，为Pinocchio系统提供可靠的高性能代码生成和调优数据管理基础。
