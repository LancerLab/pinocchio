---
description:
globs:
alwaysApply: false
---
# Pinocchio 多智能体系统模块间接口设计文档

## 1. 概述

本文档详细分析 Pinocchio 多智能体系统中各模块之间的接口关系，重点关注基于 Pydantic + JSON 构建的数据模型，确保各模块之间的交互一致性和正确性。系统主要包括以下核心模块：Config、Knowledge、Memory、Prompt、Session、LLM、Agents、Workflows。

## 2. 核心数据模型与接口规范

### 2.1 通用接口规范

所有模块间交互遵循以下规范：

1. **数据模型定义**：使用 Pydantic BaseModel 定义所有数据模型，确保类型安全
2. **序列化格式**：统一使用 JSON 作为序列化格式
3. **异常处理**：模块接口应明确定义可能的异常，并提供有意义的错误信息
4. **版本兼容**：接口设计应考虑向后兼容性

### 2.2 核心数据模型

```python
# 基础数据模型示例
from pydantic import BaseModel, Field
from typing import Dict, List, Optional, Any
from datetime import datetime
import uuid

# 所有模型的基类
class BaseEntity(BaseModel):
    """实体基类"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    timestamp: datetime = Field(default_factory=datetime.utcnow)
```

## 3. 模块间接口关系分析

### 3.1 Config 模块与其他模块的接口

Config 模块为系统提供统一的配置管理，被所有其他模块依赖。

#### 3.1.1 接口定义

```python
class Settings:
    """配置管理器"""

    def get(self, key: str, default: Any = None) -> Any:
        """获取配置值"""
        pass

    def set(self, key: str, value: Any) -> None:
        """设置配置值"""
        pass
```

#### 3.1.2 与其他模块的交互

- **LLM 模块**：提供 API 密钥、模型选择、参数设置
- **Agents 模块**：提供各类 Agent 的配置参数
- **Memory 模块**：提供存储路径、缓存策略配置
- **Session 模块**：提供会话管理相关配置

#### 3.1.3 约束与建议

- Config 模块应提供默认值，确保在配置缺失时系统仍能正常工作
- 敏感配置（如 API 密钥）应支持从环境变量加载，避免硬编码
- 配置变更应通过事件通知相关模块

### 3.2 Knowledge 模块与 Prompt 模块的接口

Knowledge 模块管理领域知识，Prompt 模块需要从中提取信息构建提示。

#### 3.2.1 数据模型

```python
# Knowledge 模块数据模型
class KnowledgeResource(BaseModel):
    """知识资源"""
    resource_id: str
    format_type: str  # "markdown", "json", "text", "code"
    title: str
    content: Union[str, Dict[str, Any]]
    tags: List[str]
    metadata: Dict[str, Any]
    created_at: str
    updated_at: str
```

#### 3.2.2 接口定义

```python
# Knowledge 到 Prompt 的接口适配器
class KnowledgeAdapter:
    """知识适配器"""

    def __init__(self, knowledge_base: KnowledgeBase):
        self.knowledge_base = knowledge_base

    def extract_for_prompt(self, query: str, template_vars: Dict[str, Any]) -> Dict[str, Any]:
        """提取知识并添加到模板变量"""
        pass
```

#### 3.2.3 约束与建议

- Knowledge 模块应支持多种内容格式（文档风格和 JSON 格式）
- 提供高效的片段提取机制，避免加载整个知识库
- 知识内容应该是长期固化的，所有会话共享的，不需要版本控制

### 3.3 Memory 模块与 Session 模块的接口

Memory 模块负责存储系统运行过程中的各类数据，Session 模块管理会话生命周期。

#### 3.3.1 数据模型

```python
# Memory 模块基础数据模型
class BaseMemory(BaseModel):
    """内存记录基类"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    session_id: str  # 关联的会话ID
```

```python
# Session 模块数据模型
class SessionMetadata(BaseModel):
    """会话元数据"""
    session_id: str
    name: str
    creation_time: datetime
    task_description: str
    status: str  # active, completed, failed
    end_time: Optional[datetime]
    runtime_seconds: Optional[float]
    tags: List[str]
```

#### 3.3.2 接口定义

```python
# Session 模块对 Memory 模块的依赖
class SessionManager:
    """会话管理器"""

    def __init__(self, base_dir: str = "./sessions"):
        self.memory_manager = None  # 将被初始化为 MemoryManager 实例

    def create_session(self, task_description: str, name: Optional[str] = None,
                      tags: Optional[List[str]] = None) -> str:
        """创建新会话并初始化相关内存管理器"""
        pass
```

#### 3.3.3 约束与建议

- Memory 应从属于 Session，确保会话隔离
- Memory 需要支持版本控制，便于追踪变更
- 提供摘要模式，支持纯文本风格的日志输出

### 3.4 Prompt 模块与 LLM 模块的接口

Prompt 模块负责模板管理和格式化，LLM 模块负责与语言模型交互。

#### 3.4.1 数据模型

```python
# Prompt 请求模型
class PromptRequest(BaseModel):
    """提示请求"""
    template_name: str
    variables: Dict[str, Any]
    knowledge_query: Optional[str]
    knowledge_selectors: Optional[Dict[str, str]]
```

```python
# LLM 请求模型
class LLMRequest(BaseModel):
    """LLM 请求"""
    prompt: str
    model: Optional[str]
    temperature: Optional[float]
    max_tokens: Optional[int]
```

#### 3.4.2 接口定义

```python
# Prompt 到 LLM 的接口
class PromptManager:
    """提示管理器"""

    def __init__(self, llm_client: LLMClient, template_registry: TemplateRegistry = None):
        self.llm_client = llm_client
        self.template_registry = template_registry or TemplateRegistry()
        self.formatter = TemplateFormatter()

    async def process_template(self, template_name: str, variables: dict) -> dict:
        """处理模板并发送到 LLM"""
        pass
```

#### 3.4.3 约束与建议

- Prompt 模块应负责模板的加载、格式化和版本管理
- LLM 模块应提供统一的接口，抽象不同提供商的差异
- 两者之间的接口应支持异步操作，避免阻塞

### 3.5 Memory 模块与 Prompt 模块的接口

Memory 模块存储系统运行记录，Prompt 模块需要从中提取信息构建上下文。

#### 3.5.1 接口定义

```python
# Memory 到 Prompt 的桥接器
class MemoryPromptBridge:
    """内存-提示桥接器"""

    def __init__(self, template_loader, memory_manager):
        self.template_loader = template_loader
        self.memory_manager = memory_manager

    def create_prompt_with_memory(self, template_name: str, memory_filter: Dict[str, Any], variables: Dict[str, Any]) -> str:
        """创建包含内存内容的提示"""
        pass
```

#### 3.5.2 约束与建议

- Memory 模块应提供灵活的查询接口，支持按类型、时间等过滤
- Prompt 模块应能高效整合内存内容，避免提示过长
- 明确定义内存记录如何转换为提示上下文的规则

### 3.6 Agents 模块与其他模块的接口

Agents 模块是系统的核心处理单元，需要与多个模块交互。

#### 3.6.1 数据模型

```python
# Agent 请求/响应基类
class AgentRequest(BaseModel):
    """Agent 请求基类"""
    session_id: str
    request_id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    agent_type: str
    metadata: Dict[str, Any] = Field(default_factory=dict)

class AgentResponse(BaseModel):
    """Agent 响应基类"""
    session_id: str
    request_id: str
    response_id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    agent_type: str
    success: bool
    error_message: Optional[str]
    processing_time_ms: int
    metadata: Dict[str, Any] = Field(default_factory=dict)
```

#### 3.6.2 接口定义

```python
# Agent 基类
class AgentBase(ABC):
    """Agent 基类"""

    def __init__(self, config: Optional[Dict[str, Any]] = None):
        self.config = config or {}
        self.llm_client = self._get_llm_client()

    @abstractmethod
    async def process(self, request: Dict[str, Any]) -> Dict[str, Any]:
        """处理请求"""
        pass
```

#### 3.6.3 约束与建议

- Agents 应使用统一的请求/响应模型，便于工作流编排
- 支持异步处理，避免阻塞工作流
- 明确定义错误处理和重试策略

### 3.7 Workflows 模块与其他模块的接口

Workflows 模块负责编排多个 Agents 的协作流程。

#### 3.7.1 数据模型

```python
# 工作流定义模型
class Task(BaseModel):
    """任务定义"""
    name: str
    description: Optional[str]

class Workflow(BaseModel):
    """工作流定义"""
    name: str
    description: Optional[str]
    tasks: Dict[str, Task]
    edges: Dict[str, List[Dict[str, Any]]]
    start_tasks: List[str]
```

#### 3.7.2 接口定义

```python
# 工作流执行器
class WorkflowExecutor:
    """工作流执行器"""

    def __init__(self, message_queue = None):
        self.message_queue = message_queue or MessageQueue()

    async def execute_workflow(self, workflow: Workflow, initial_context: Dict[str, Any] = None) -> Dict[str, Any]:
        """执行工作流"""
        pass
```

#### 3.7.3 约束与建议

- 工作流定义应支持条件分支和循环
- 提供监控和可视化工作流执行状态的机制
- 支持工作流的暂停、恢复和取消

## 4. 模块间数据流分析

### 4.1 典型交互流程

1. **会话初始化流程**
   - Session 模块创建新会话
   - Memory 模块初始化会话相关内存
   - Config 模块加载配置

2. **Agent 执行流程**
   - Workflow 模块调度 Agent
   - Agent 从 Knowledge 模块获取领域知识
   - Prompt 模块格式化提示
   - LLM 模块处理请求
   - Memory 模块记录交互

3. **结果输出流程**
   - Memory 模块记录最终结果
   - Session 模块完成会话
   - 输出摘要日志

### 4.2 数据转换与一致性

在模块间传递数据时，需要确保数据的一致性和完整性：

1. **序列化/反序列化**：使用 Pydantic 的 `json()` 和 `parse_raw()` 方法
2. **数据验证**：利用 Pydantic 的字段验证功能
3. **类型安全**：充分利用 Python 类型注解和 Pydantic 的类型检查

## 5. 关键接口约束与最佳实践

### 5.1 Memory 与 Knowledge 的区别与关系

| 特性 | Memory | Knowledge |
|------|--------|-----------|
| 作用范围 | 会话级别 | 全局共享 |
| 更新频率 | 频繁更新 | 稳定，很少更新 |
| 版本控制 | 需要 | 不需要 |
| 存储内容 | 交互记录、代码版本等 | 领域知识、最佳实践等 |
| 数据格式 | 结构化 JSON | 文档风格或结构化 JSON |

约束：
- Knowledge 不应存储会话相关的临时数据
- Memory 不应尝试替代 Knowledge 的领域知识管理功能

### 5.2 Prompt 与 Memory/Knowledge 的关系

Prompt 模块应作为 Memory 和 Knowledge 的消费者，而不是直接管理这些数据：

1. **知识提取**：从 Knowledge 中提取相关信息作为上下文
2. **记忆整合**：从 Memory 中获取历史交互作为上下文
3. **模板管理**：维护提示模板，但不存储领域知识

最佳实践：
- 使用适配器模式连接 Knowledge/Memory 和 Prompt
- 在提示中明确标记不同来源的内容
- 提供上下文窗口大小控制机制

### 5.3 Session 与其他模块的生命周期管理

Session 模块应负责协调其他模块的生命周期：

1. **初始化顺序**：Config → Session → Memory → Knowledge → Prompt → LLM → Agents → Workflows
2. **资源释放**：会话结束时按相反顺序释放资源
3. **状态保持**：确保会话恢复时各模块状态一致

最佳实践：
- 使用上下文管理器模式管理会话生命周期
- 提供显式的会话开始/结束方法
- 实现会话状态的序列化和反序列化

## 6. 轻量级设计优化建议

根据单机精简设计原则，提出以下优化建议：

### 6.1 Config 模块优化

- 移除 YAML 支持，仅保留 JSON 配置
- 简化凭证管理，使用环境变量而非复杂的凭证存储
- 移除动态配置更新机制，采用启动时加载策略

### 6.2 Knowledge 模块优化

- 简化资源类型，统一为 ContentFormat 枚举
- 使用直接文件存储而非数据库
- 添加高效的片段提取功能，支持文档和 JSON 格式
- 实现异步文件操作和内存缓存

### 6.3 Memory 模块优化

- 实现内存日志双模式：结构化 JSON 和纯文本摘要
- 简化版本控制，仅保留关键节点的版本记录
- 使用文件系统直接存储，避免引入数据库依赖

### 6.4 Prompt 模块优化

- 移除复杂的模板继承机制，使用组合模式
- 简化模板加载器，专注于文件系统
- 优化与 Knowledge 和 Memory 的集成接口

### 6.5 Workflows 模块优化

- 使用轻量级内存消息队列替代复杂的消息中间件
- 简化工作流定义，使用函数组合而非复杂的 DSL
- 移除并行执行支持，专注于顺序执行和条件分支

## 7. 总结

本文档分析了 Pinocchio 多智能体系统中各模块间的接口关系，重点关注了基于 Pydantic + JSON 的数据模型设计。通过明确定义模块间的交互接口和约束，确保了系统各部分的一致性和正确性。同时，根据单机精简设计的需求，提出了一系列优化建议，以减少复杂性和外部依赖。

核心原则包括：

1. **数据模型一致性**：统一使用 Pydantic 模型和 JSON 序列化
2. **模块职责明确**：Knowledge 负责领域知识，Memory 负责会话记录，Prompt 负责模板管理
3. **接口简洁明确**：定义清晰的模块间接口，避免复杂依赖
4. **轻量级实现**：移除不必要的复杂性，专注于核心功能

通过这些设计和优化，Pinocchio 系统可以在保持功能完整的同时，实现轻量级、高效的单机部署。
