---
description: testing模块设计
globs: 
alwaysApply: false
---
# Pinocchio 多智能体系统测试策略

## 1. 概述

本文档描述了Pinocchio多智能体系统的测试策略、框架选择和最佳实践。测试设计旨在确保系统各组件的正确性、稳定性和可维护性，同时保持测试的轻量级和高效性。

---

## 2. 测试框架选择

### 2.1 主要测试框架

| 框架 | 用途 | 选择理由 |
|-----|-----|---------|
| pytest | 单元测试和集成测试 | 轻量级、易用性高、丰富的插件生态系统、参数化测试支持、灵活的夹具系统 |

### 2.2 辅助工具

| 工具 | 用途 | 备注 |
|-----|-----|-----|
| pytest-cov | 代码覆盖率分析 | 可选，用于评估测试覆盖情况 |
| pytest-mock | 模拟对象 | 简化mock对象创建，特别是对外部依赖的模拟 |
| pytest-asyncio | 异步测试支持 | 如果系统包含异步组件则需要 |

---

## 3. 测试目录结构

```
pinocchio/
├── tests/
│   ├── __init__.py
│   ├── conftest.py                 # 共享测试夹具和配置
│   ├── unit/                       # 单元测试目录
│   │   ├── __init__.py
│   │   ├── memory/                 # Memory模块测试
│   │   │   ├── __init__.py
│   │   │   ├── test_models.py
│   │   │   ├── test_manager.py
│   │   │   └── test_store.py
│   │   ├── session/                # Session模块测试
│   │   │   ├── __init__.py
│   │   │   ├── test_models.py
│   │   │   └── test_manager.py
│   │   └── agents/                 # Agents模块测试
│   │       ├── __init__.py
│   │       ├── test_base.py
│   │       └── test_specific_agents.py
│   ├── integration/                # 集成测试目录
│   │   ├── __init__.py
│   │   ├── test_workflows.py
│   │   └── test_end_to_end.py
│   ├── fixtures/                   # 测试数据和夹具
│   │   ├── __init__.py
│   │   ├── sample_code.py
│   │   ├── sample_prompts.py
│   │   └── llm_responses/          # 模拟LLM响应
│   │       ├── generator/
│   │       ├── debugger/
│   │       └── optimizer/
│   └── mocks/                      # 模拟外部依赖
│       ├── __init__.py
│       ├── llm_client.py
│       └── compiler.py
└── pyproject.toml                  # 包含pytest配置
```

---

## 4. 测试类型与策略

### 4.1 单元测试

- **目标**：验证单个组件（类、函数、方法）的正确性
- **范围**：所有公共接口和关键内部方法
- **隔离策略**：使用mock对象隔离外部依赖
- **命名约定**：`test_[被测函数名]_[测试场景].py`
- **最小覆盖率目标**：80%

### 4.2 集成测试

- **目标**：验证多个组件协同工作的正确性
- **范围**：主要工作流和组件交互
- **策略**：尽可能使用真实组件，只mock外部系统
- **命名约定**：`test_[工作流名称]_[测试场景].py`

### 4.3 端到端测试

- **目标**：验证完整系统功能
- **范围**：有限数量的关键场景
- **策略**：模拟LLM响应，但使用真实的文件系统和内部组件
- **命名约定**：`test_e2e_[场景名称].py`

---

## 5. 测试数据管理

### 5.1 测试夹具

- 使用pytest fixtures管理测试状态和依赖
- 将常用夹具定义在`conftest.py`中实现共享
- 模块特定的夹具放在相应的测试模块中

### 5.2 模拟数据

- 样本代码、提示和响应存储在`fixtures`目录
- 大型测试数据使用JSON或YAML格式存储
- 使用工厂函数生成参数化测试数据

---

## 6. 模拟外部依赖

### 6.1 LLM API模拟

- 使用预定义的响应模拟LLM API调用
- 响应存储在JSON文件中，按场景组织
- 支持模拟延迟和错误情况

### 6.2 文件系统模拟

- 对于单元测试，使用`tmp_path`夹具创建临时目录
- 避免测试对实际文件系统的依赖

---

## 7. 测试执行

### 7.1 本地执行

```bash
# 运行所有测试
pytest

# 运行特定模块的测试
pytest tests/unit/memory/

# 运行带标记的测试
pytest -m "slow"

# 生成覆盖率报告
pytest --cov=pinocchio
```

### 7.2 持续集成

- 在每次提交时自动运行单元测试
- 在合并请求时运行完整测试套件
- 定期运行端到端测试

---

## 8. 测试最佳实践

### 8.1 通用原则

- **测试隔离**：每个测试应该独立运行，不依赖其他测试的状态
- **明确断言**：每个测试应该有明确的断言，验证预期结果
- **测试可读性**：测试名称和内容应该清晰表达测试意图
- **避免测试逻辑**：测试代码应该简单直接，避免复杂的条件逻辑

### 8.2 参数化测试

使用pytest的参数化功能测试多种输入场景：

```python
@pytest.mark.parametrize("input,expected", [
    ("case1", "result1"),
    ("case2", "result2"),
])
def test_function(input, expected):
    assert function(input) == expected
```

### 8.3 异常测试

验证异常处理逻辑：

```python
def test_invalid_input():
    with pytest.raises(ValueError) as excinfo:
        function(invalid_input)
    assert "expected error message" in str(excinfo.value)
```

---

## 9. 特殊测试场景

### 9.1 LLM交互测试

- 使用确定性的模拟响应
- 验证提示格式和响应解析
- 测试错误处理和重试逻辑

### 9.2 文件系统交互测试

- 使用临时目录进行真实文件操作
- 验证文件创建、读取、更新和删除操作
- 测试并发访问和错误处理

### 9.3 会话管理测试

- 验证会话创建、加载和保存
- 测试会话隔离和状态管理
- 验证会话导入/导出功能

---

## 10. 代码质量工具集成

### 10.1 代码覆盖率

- 使用pytest-cov生成覆盖率报告
- 设置最小覆盖率阈值
- 关注关键路径的覆盖情况

### 10.2 静态分析

- 集成mypy进行类型检查
- 使用flake8或pylint进行代码风格检查
- 在CI流程中运行静态分析